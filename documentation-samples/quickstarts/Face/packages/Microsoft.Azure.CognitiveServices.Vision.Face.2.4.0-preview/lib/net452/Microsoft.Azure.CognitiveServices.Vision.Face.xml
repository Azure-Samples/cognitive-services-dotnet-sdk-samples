<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Azure.CognitiveServices.Vision.Face</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.ApiKeyServiceClientCredentials">
            <summary>
            Allows authentication to the API using a basic apiKey mechanism
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ApiKeyServiceClientCredentials.#ctor(System.String)">
            <summary>
            Creates a new instance of the ApiKeyServiceClientCredentails class
            </summary>
            <param name="subscriptionKey">The subscription key to authenticate and authorize as</param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ApiKeyServiceClientCredentials.ProcessHttpRequestAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Add the Basic Authentication Header to each outgoing request
            </summary>
            <param name="request">The outgoing request</param>
            <param name="cancellationToken">A token to cancel the operation</param>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient">
            <summary>
            An API for face detection, verification, and identification.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.BaseUri">
            <summary>
            The base URI of the service.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.SerializationSettings">
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.Endpoint">
            <summary>
            Supported Cognitive Services endpoints (protocol and hostname, for example:
            https://westus.api.cognitive.microsoft.com).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.Face">
            <summary>
            Gets the IFaceOperations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.PersonGroupPerson">
            <summary>
            Gets the IPersonGroupPerson.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.PersonGroup">
            <summary>
            Gets the IPersonGroupOperations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.FaceList">
            <summary>
            Gets the IFaceListOperations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.LargePersonGroupPerson">
            <summary>
            Gets the ILargePersonGroupPerson.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.LargePersonGroup">
            <summary>
            Gets the ILargePersonGroupOperations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.LargeFaceList">
            <summary>
            Gets the ILargeFaceListOperations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.Snapshot">
            <summary>
            Gets the ISnapshotOperations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.#ctor(System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the FaceClient class.
            </summary>
            <param name='httpClient'>
            HttpClient to be used
            </param>
            <param name='disposeHttpClient'>
            True: will dispose the provided httpClient on calling FaceClient.Dispose(). False: will not dispose provided httpClient</param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.#ctor(System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the FaceClient class.
            </summary>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.#ctor(System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the FaceClient class.
            </summary>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the FaceClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClient,System.Boolean)">
            <summary>
            Initializes a new instance of the FaceClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='httpClient'>
            HttpClient to be used
            </param>
            <param name='disposeHttpClient'>
            True: will dispose the provided httpClient on calling FaceClient.Dispose(). False: will not dispose provided httpClient</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.#ctor(Microsoft.Rest.ServiceClientCredentials,System.Net.Http.HttpClientHandler,System.Net.Http.DelegatingHandler[])">
            <summary>
            Initializes a new instance of the FaceClient class.
            </summary>
            <param name='credentials'>
            Required. Subscription credentials which uniquely identify client subscription.
            </param>
            <param name='rootHandler'>
            Optional. The http client handler used to handle http transport.
            </param>
            <param name='handlers'>
            Optional. The delegating handlers to add to the http client pipeline.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient.Initialize">
            <summary>
            Initializes client properties.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperations">
            <summary>
            FaceListOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperations.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient)">
            <summary>
            Initializes a new instance of the FaceListOperations class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperations.Client">
            <summary>
            Gets a reference to the FaceClient
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperations.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create an empty face list with user-specified faceListId, name, an optional
             userData and recognitionModel. Up to 64 face lists are allowed in one
             subscription.
             &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and used by
             [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             &lt;br /&gt; After creation, user should use [FaceList - Add
             Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250)
             to import the faces. Faces are stored on server until [FaceList -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f)
             is called.
             &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like
             faces, similar face filtering, or as a light way face identification. But
             if the actual use is to identify person, please use
             [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)
             /
             [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)
             and [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt; Please consider
             [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)
             when the face number is large. It can support up to 1,000,000 faces.
             'recognitionModel' should be specified to associate with this face list.
             The default value for 'recognitionModel' is 'recognition_01', if the latest
             model needed, please explicitly specify the model you need in this
             parameter. New faces that are added to an existing face list will use the
             recognition model that's already associated with the collection. Existing
             face features in a face list can't be updated to features extracted by
             another version of recognition model.
            
             </summary>
             <param name='faceListId'>
             Id referencing a particular face list.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperations.GetWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Retrieve a face list’s faceListId, name, userData, recognitionModel and
             faces in the face list.
            
             </summary>
             <param name='faceListId'>
             Id referencing a particular face list.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperations.UpdateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update information of a face list.
            </summary>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperations.DeleteWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing face list according to faceListId. Persisted face images
            in the face list will also be deleted.
            </summary>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperations.ListWithHttpMessagesAsync(System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             List face lists’ faceListId, name, userData and recognitionModel. &lt;br
             /&gt;
             To get face information inside faceList use [FaceList -
             Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c)
            
             </summary>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperations.DeleteFaceWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing face from a face list (given by a persistedFaceId and a
            faceListId). Persisted image related to the face will also be deleted.
            </summary>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperations.AddFaceFromUrlWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a face to a face list. The input face is specified as an image with a
            targetFace rectangle. It returns a persistedFaceId representing the added
            face, and persistedFaceId will not expire.
            </summary>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperations.AddFaceFromStreamWithHttpMessagesAsync(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a face to a face list. The input face is specified as an image with a
            targetFace rectangle. It returns a persistedFaceId representing the added
            face, and persistedFaceId will not expire.
            </summary>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperationsExtensions">
            <summary>
            Extension methods for FaceListOperations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperationsExtensions.CreateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Create an empty face list with user-specified faceListId, name, an optional
             userData and recognitionModel. Up to 64 face lists are allowed in one
             subscription.
             &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and used by
             [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             &lt;br /&gt; After creation, user should use [FaceList - Add
             Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250)
             to import the faces. Faces are stored on server until [FaceList -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f)
             is called.
             &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like
             faces, similar face filtering, or as a light way face identification. But
             if the actual use is to identify person, please use
             [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)
             /
             [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)
             and [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt; Please consider
             [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)
             when the face number is large. It can support up to 1,000,000 faces.
             'recognitionModel' should be specified to associate with this face list.
             The default value for 'recognitionModel' is 'recognition_01', if the latest
             model needed, please explicitly specify the model you need in this
             parameter. New faces that are added to an existing face list will use the
             recognition model that's already associated with the collection. Existing
             face features in a face list can't be updated to features extracted by
             another version of recognition model.
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='faceListId'>
             Id referencing a particular face list.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperationsExtensions.GetAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Retrieve a face list’s faceListId, name, userData, recognitionModel and
             faces in the face list.
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='faceListId'>
             Id referencing a particular face list.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperationsExtensions.UpdateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update information of a face list.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperationsExtensions.DeleteAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete an existing face list according to faceListId. Persisted face images
            in the face list will also be deleted.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperationsExtensions.ListAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             List face lists’ faceListId, name, userData and recognitionModel. &lt;br
             /&gt;
             To get face information inside faceList use [FaceList -
             Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c)
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperationsExtensions.DeleteFaceAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete an existing face from a face list (given by a persistedFaceId and a
            faceListId). Persisted image related to the face will also be deleted.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperationsExtensions.AddFaceFromUrlAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations,System.String,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add a face to a face list. The input face is specified as an image with a
            targetFace rectangle. It returns a persistedFaceId representing the added
            face, and persistedFaceId will not expire.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceListOperationsExtensions.AddFaceFromStreamAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations,System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add a face to a face list. The input face is specified as an image with a
            targetFace rectangle. It returns a persistedFaceId representing the added
            face, and persistedFaceId will not expire.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperations">
            <summary>
            FaceOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperations.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient)">
            <summary>
            Initializes a new instance of the FaceOperations class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperations.Client">
            <summary>
            Gets a reference to the FaceClient
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperations.FindSimilarWithHttpMessagesAsync(System.Guid,System.String,System.String,System.Collections.Generic.IList{System.Nullable{System.Guid}},System.Nullable{System.Int32},Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarMatchMode,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Given query face's faceId, to search the similar-looking faces from a
             faceId array, a face list or a large face list. faceId array contains the
             faces created by [Face -
             Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236),
             which will expire 24 hours after creation. A "faceListId" is created by
             [FaceList -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b)
             containing persistedFaceIds that will not expire. And a "largeFaceListId"
             is created by [LargeFaceList -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)
             containing persistedFaceIds that will also not expire. Depending on the
             input the returned similar faces list contains faceIds or persistedFaceIds
             ranked by similarity.
             &lt;br/&gt;Find similar has two working modes, "matchPerson" and
             "matchFace". "matchPerson" is the default mode that it tries to find faces
             of the same person as possible by using internal same-person thresholds. It
             is useful to find a known person's other photos. Note that an empty list
             will be returned if no faces pass the internal thresholds. "matchFace" mode
             ignores same-person thresholds and returns ranked similar faces anyway,
             even the similarity is low. It can be used in the cases like searching
             celebrity-looking faces.
             &lt;br/&gt;The 'recognitionModel' associated with the query face's faceId
             should be the same as the 'recognitionModel' used by the target faceId
             array, face list or large face list.
            
             </summary>
             <param name='faceId'>
             FaceId of the query face. User needs to call Face - Detect first to get a
             valid faceId. Note that this faceId is not persisted and will expire 24
             hours after the detection call
             </param>
             <param name='faceListId'>
             An existing user-specified unique candidate face list, created in Face List
             - Create a Face List. Face list contains a set of persistedFaceIds which
             are persisted and will never expire. Parameter faceListId, largeFaceListId
             and faceIds should not be provided at the same time.
             </param>
             <param name='largeFaceListId'>
             An existing user-specified unique candidate large face list, created in
             LargeFaceList - Create. Large face list contains a set of persistedFaceIds
             which are persisted and will never expire. Parameter faceListId,
             largeFaceListId and faceIds should not be provided at the same time.
             </param>
             <param name='faceIds'>
             An array of candidate faceIds. All of them are created by Face - Detect and
             the faceIds will expire 24 hours after the detection call. The number of
             faceIds is limited to 1000. Parameter faceListId, largeFaceListId and
             faceIds should not be provided at the same time.
             </param>
             <param name='maxNumOfCandidatesReturned'>
             The number of top similar faces returned. The valid range is [1, 1000].
             </param>
             <param name='mode'>
             Similar face searching mode. It can be "matchPerson" or "matchFace".
             Possible values include: 'matchPerson', 'matchFace'
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperations.GroupWithHttpMessagesAsync(System.Collections.Generic.IList{System.Guid},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Divide candidate faces into groups based on face similarity.&lt;br /&gt;
             * The output is one or more disjointed face groups and a messyGroup. A face
             group contains faces that have similar looking, often of the same person.
             Face groups are ranked by group size, i.e. number of faces. Notice that
             faces belonging to a same person might be split into several groups in the
             result.
             * MessyGroup is a special face group containing faces that cannot find any
             similar counterpart face from original faces. The messyGroup will not
             appear in the result if all faces found their counterparts.
             * Group API needs at least 2 candidate faces and 1000 at most. We suggest
             to try [Face -
             Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)
             when you only have 2 candidate faces.
             * The 'recognitionModel' associated with the query faces' faceIds should be
             the same.
            
             </summary>
             <param name='faceIds'>
             Array of candidate faceId created by Face - Detect. The maximum is 1000
             faces
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperations.IdentifyWithHttpMessagesAsync(System.Collections.Generic.IList{System.Guid},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             1-to-many identification to find the closest matches of the specific query
             person face from a person group or large person group.
             &lt;br/&gt; For each face in the faceIds array, Face Identify will compute
             similarities between the query face and all the faces in the person group
             (given by personGroupId) or large person group (given by
             largePersonGroupId), and return candidate person(s) for that face ranked by
             similarity confidence. The person group/large person group should be
             trained to make it ready for identification. See more in [PersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)
             and [LargePersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).
             &lt;br/&gt;
            
             Remarks:&lt;br /&gt;
             * The algorithm allows more than one face to be identified independently at
             the same request, but no more than 10 faces.
             * Each person in the person group/large person group could have more than
             one face, but no more than 248 faces.
             * Higher face image quality means better identification precision. Please
             consider high-quality faces: frontal, clear, and face size is 200x200
             pixels (100 pixels between eyes) or bigger.
             * Number of candidates returned is restricted by maxNumOfCandidatesReturned
             and confidenceThreshold. If no person is identified, the returned
             candidates will be an empty array.
             * Try [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237)
             when you need to find similar faces from a face list/large face list
             instead of a person group/large person group.
             * The 'recognitionModel' associated with the query faces' faceIds should be
             the same as the 'recognitionModel' used by the target person group or large
             person group.
            
             </summary>
             <param name='faceIds'>
             Array of query faces faceIds, created by the Face - Detect. Each of the
             faces are identified independently. The valid number of faceIds is between
             [1, 10].
             </param>
             <param name='personGroupId'>
             PersonGroupId of the target person group, created by PersonGroup - Create.
             Parameter personGroupId and largePersonGroupId should not be provided at
             the same time.
             </param>
             <param name='largePersonGroupId'>
             LargePersonGroupId of the target large person group, created by
             LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId
             should not be provided at the same time.
             </param>
             <param name='maxNumOfCandidatesReturned'>
             The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).
             </param>
             <param name='confidenceThreshold'>
             Confidence threshold of identification, used to judge whether one face
             belong to one person. The range of confidenceThreshold is [0, 1] (default
             specified by algorithm).
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperations.VerifyFaceToFaceWithHttpMessagesAsync(System.Guid,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Verify whether two faces belong to a same person or whether one face
             belongs to a person.
             &lt;br/&gt;
             Remarks:&lt;br /&gt;
             * Higher face image quality means better identification precision. Please
             consider high-quality faces: frontal, clear, and face size is 200x200
             pixels (100 pixels between eyes) or bigger.
             * For the scenarios that are sensitive to accuracy please make your own
             judgment.
             * The 'recognitionModel' associated with the query faces' faceIds should be
             the same as the 'recognitionModel' used by the target face, person group or
             large person group.
            
             </summary>
             <param name='faceId1'>
             FaceId of the first face, comes from Face - Detect
             </param>
             <param name='faceId2'>
             FaceId of the second face, comes from Face - Detect
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperations.DetectWithUrlWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributeType},System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Detect human faces in an image, return face rectangles, and optionally with
             faceIds, landmarks, and attributes.&lt;br /&gt;
             * Optional parameters including faceId, landmarks, and attributes.
             Attributes include age, gender, headPose, smile, facialHair, glasses,
             emotion, hair, makeup, occlusion, accessories, blur, exposure and noise.
             * The extracted face feature, instead of the actual image, will be stored
             on server. The faceId is an identifier of the face feature and will be used
             in [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239),
             [Face -
             Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a),
             and [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             It will expire 24 hours after the detection call.
             * Higher face image quality means better detection and recognition
             precision. Please consider high-quality faces: frontal, clear, and face
             size is 200x200 pixels (100 pixels between eyes) or bigger.
             * JPEG, PNG, GIF (the first frame), and BMP format are supported. The
             allowed image file size is from 1KB to 6MB.
             * Faces are detectable when its size is 36x36 to 4096x4096 pixels. If need
             to detect very small but clear faces, please try to enlarge the input
             image.
             * Up to 64 faces can be returned for an image. Faces are ranked by face
             rectangle size from large to small.
             * Face detector prefer frontal and near-frontal faces. There are cases that
             faces may not be detected, e.g. exceptionally large face angles (head-pose)
             or being occluded, or wrong image orientation.
             * Attributes (age, gender, headPose, smile, facialHair, glasses, emotion,
             hair, makeup, occlusion, accessories, blur, exposure and noise) may not be
             perfectly accurate. HeadPose's pitch value is a reserved field and will
             always return 0.
             * Different 'recognitionModel' values are provided. If follow-up operations
             like Verify, Identify, Find Similar are needed, please specify the
             recognition model with 'recognitionModel' parameter. The default value for
             'recognitionModel' is 'recognition_01', if latest model needed, please
             explicitly specify the model you need in this parameter. Once specified,
             the detected faceIds will be associated with the specified recognition
             model. More details, please refer to [How to specify a recognition
             model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
            
             </summary>
             <param name='url'>
             Publicly reachable URL of an image
             </param>
             <param name='returnFaceId'>
             A value indicating whether the operation should return faceIds of detected
             faces.
             </param>
             <param name='returnFaceLandmarks'>
             A value indicating whether the operation should return landmarks of the
             detected faces.
             </param>
             <param name='returnFaceAttributes'>
             Analyze and return the one or more specified face attributes in the
             comma-separated string like "returnFaceAttributes=age,gender". Supported
             face attributes include age, gender, headPose, smile, facialHair, glasses
             and emotion. Note that each face attribute analysis has additional
             computational and time cost.
             </param>
             <param name='recognitionModel'>
             Name of recognition model. Recognition model is used when the face features
             are extracted and associated with detected faceIds, (Large)FaceList or
             (Large)PersonGroup. A recognition model name can be provided when
             performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup
             - Create. The default value is 'recognition_01', if latest model needed,
             please explicitly specify the model you need. Possible values include:
             'recognition_01', 'recognition_02'
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperations.VerifyFaceToPersonWithHttpMessagesAsync(System.Guid,System.Guid,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Verify whether two faces belong to a same person. Compares a face Id with a
            Person Id
            </summary>
            <param name='faceId'>
            FaceId of the face, comes from Face - Detect
            </param>
            <param name='personId'>
            Specify a certain person in a person group or a large person group.
            personId is created in PersonGroup Person - Create or LargePersonGroup
            Person - Create.
            </param>
            <param name='personGroupId'>
            Using existing personGroupId and personId for fast loading a specified
            person. personGroupId is created in PersonGroup - Create. Parameter
            personGroupId and largePersonGroupId should not be provided at the same
            time.
            </param>
            <param name='largePersonGroupId'>
            Using existing largePersonGroupId and personId for fast loading a specified
            person. largePersonGroupId is created in LargePersonGroup - Create.
            Parameter personGroupId and largePersonGroupId should not be provided at
            the same time.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperations.DetectWithStreamWithHttpMessagesAsync(System.IO.Stream,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributeType},System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Detect human faces in an image and returns face locations, and optionally
            with faceIds, landmarks, and attributes.
            </summary>
            <param name='image'>
            An image stream.
            </param>
            <param name='returnFaceId'>
            A value indicating whether the operation should return faceIds of detected
            faces.
            </param>
            <param name='returnFaceLandmarks'>
            A value indicating whether the operation should return landmarks of the
            detected faces.
            </param>
            <param name='returnFaceAttributes'>
            Analyze and return the one or more specified face attributes in the
            comma-separated string like "returnFaceAttributes=age,gender". Supported
            face attributes include age, gender, headPose, smile, facialHair, glasses
            and emotion. Note that each face attribute analysis has additional
            computational and time cost.
            </param>
            <param name='recognitionModel'>
            Name of recognition model. Recognition model is used when the face features
            are extracted and associated with detected faceIds, (Large)FaceList or
            (Large)PersonGroup. A recognition model name can be provided when
            performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup
            - Create. The default value is 'recognition_01', if latest model needed,
            please explicitly specify the model you need. Possible values include:
            'recognition_01', 'recognition_02'
            </param>
            <param name='returnRecognitionModel'>
            A value indicating whether the operation should return 'recognitionModel'
            in response.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperationsExtensions">
            <summary>
            Extension methods for FaceOperations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperationsExtensions.FindSimilarAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations,System.Guid,System.String,System.String,System.Collections.Generic.IList{System.Nullable{System.Guid}},System.Nullable{System.Int32},Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarMatchMode,System.Threading.CancellationToken)">
             <summary>
             Given query face's faceId, to search the similar-looking faces from a
             faceId array, a face list or a large face list. faceId array contains the
             faces created by [Face -
             Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236),
             which will expire 24 hours after creation. A "faceListId" is created by
             [FaceList -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b)
             containing persistedFaceIds that will not expire. And a "largeFaceListId"
             is created by [LargeFaceList -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)
             containing persistedFaceIds that will also not expire. Depending on the
             input the returned similar faces list contains faceIds or persistedFaceIds
             ranked by similarity.
             &lt;br/&gt;Find similar has two working modes, "matchPerson" and
             "matchFace". "matchPerson" is the default mode that it tries to find faces
             of the same person as possible by using internal same-person thresholds. It
             is useful to find a known person's other photos. Note that an empty list
             will be returned if no faces pass the internal thresholds. "matchFace" mode
             ignores same-person thresholds and returns ranked similar faces anyway,
             even the similarity is low. It can be used in the cases like searching
             celebrity-looking faces.
             &lt;br/&gt;The 'recognitionModel' associated with the query face's faceId
             should be the same as the 'recognitionModel' used by the target faceId
             array, face list or large face list.
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='faceId'>
             FaceId of the query face. User needs to call Face - Detect first to get a
             valid faceId. Note that this faceId is not persisted and will expire 24
             hours after the detection call
             </param>
             <param name='faceListId'>
             An existing user-specified unique candidate face list, created in Face List
             - Create a Face List. Face list contains a set of persistedFaceIds which
             are persisted and will never expire. Parameter faceListId, largeFaceListId
             and faceIds should not be provided at the same time.
             </param>
             <param name='largeFaceListId'>
             An existing user-specified unique candidate large face list, created in
             LargeFaceList - Create. Large face list contains a set of persistedFaceIds
             which are persisted and will never expire. Parameter faceListId,
             largeFaceListId and faceIds should not be provided at the same time.
             </param>
             <param name='faceIds'>
             An array of candidate faceIds. All of them are created by Face - Detect and
             the faceIds will expire 24 hours after the detection call. The number of
             faceIds is limited to 1000. Parameter faceListId, largeFaceListId and
             faceIds should not be provided at the same time.
             </param>
             <param name='maxNumOfCandidatesReturned'>
             The number of top similar faces returned. The valid range is [1, 1000].
             </param>
             <param name='mode'>
             Similar face searching mode. It can be "matchPerson" or "matchFace".
             Possible values include: 'matchPerson', 'matchFace'
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperationsExtensions.GroupAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations,System.Collections.Generic.IList{System.Guid},System.Threading.CancellationToken)">
             <summary>
             Divide candidate faces into groups based on face similarity.&lt;br /&gt;
             * The output is one or more disjointed face groups and a messyGroup. A face
             group contains faces that have similar looking, often of the same person.
             Face groups are ranked by group size, i.e. number of faces. Notice that
             faces belonging to a same person might be split into several groups in the
             result.
             * MessyGroup is a special face group containing faces that cannot find any
             similar counterpart face from original faces. The messyGroup will not
             appear in the result if all faces found their counterparts.
             * Group API needs at least 2 candidate faces and 1000 at most. We suggest
             to try [Face -
             Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)
             when you only have 2 candidate faces.
             * The 'recognitionModel' associated with the query faces' faceIds should be
             the same.
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='faceIds'>
             Array of candidate faceId created by Face - Detect. The maximum is 1000
             faces
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperationsExtensions.IdentifyAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations,System.Collections.Generic.IList{System.Guid},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Double},System.Threading.CancellationToken)">
             <summary>
             1-to-many identification to find the closest matches of the specific query
             person face from a person group or large person group.
             &lt;br/&gt; For each face in the faceIds array, Face Identify will compute
             similarities between the query face and all the faces in the person group
             (given by personGroupId) or large person group (given by
             largePersonGroupId), and return candidate person(s) for that face ranked by
             similarity confidence. The person group/large person group should be
             trained to make it ready for identification. See more in [PersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)
             and [LargePersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).
             &lt;br/&gt;
            
             Remarks:&lt;br /&gt;
             * The algorithm allows more than one face to be identified independently at
             the same request, but no more than 10 faces.
             * Each person in the person group/large person group could have more than
             one face, but no more than 248 faces.
             * Higher face image quality means better identification precision. Please
             consider high-quality faces: frontal, clear, and face size is 200x200
             pixels (100 pixels between eyes) or bigger.
             * Number of candidates returned is restricted by maxNumOfCandidatesReturned
             and confidenceThreshold. If no person is identified, the returned
             candidates will be an empty array.
             * Try [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237)
             when you need to find similar faces from a face list/large face list
             instead of a person group/large person group.
             * The 'recognitionModel' associated with the query faces' faceIds should be
             the same as the 'recognitionModel' used by the target person group or large
             person group.
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='faceIds'>
             Array of query faces faceIds, created by the Face - Detect. Each of the
             faces are identified independently. The valid number of faceIds is between
             [1, 10].
             </param>
             <param name='personGroupId'>
             PersonGroupId of the target person group, created by PersonGroup - Create.
             Parameter personGroupId and largePersonGroupId should not be provided at
             the same time.
             </param>
             <param name='largePersonGroupId'>
             LargePersonGroupId of the target large person group, created by
             LargePersonGroup - Create. Parameter personGroupId and largePersonGroupId
             should not be provided at the same time.
             </param>
             <param name='maxNumOfCandidatesReturned'>
             The range of maxNumOfCandidatesReturned is between 1 and 5 (default is 1).
             </param>
             <param name='confidenceThreshold'>
             Confidence threshold of identification, used to judge whether one face
             belong to one person. The range of confidenceThreshold is [0, 1] (default
             specified by algorithm).
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperationsExtensions.VerifyFaceToFaceAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations,System.Guid,System.Guid,System.Threading.CancellationToken)">
             <summary>
             Verify whether two faces belong to a same person or whether one face
             belongs to a person.
             &lt;br/&gt;
             Remarks:&lt;br /&gt;
             * Higher face image quality means better identification precision. Please
             consider high-quality faces: frontal, clear, and face size is 200x200
             pixels (100 pixels between eyes) or bigger.
             * For the scenarios that are sensitive to accuracy please make your own
             judgment.
             * The 'recognitionModel' associated with the query faces' faceIds should be
             the same as the 'recognitionModel' used by the target face, person group or
             large person group.
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='faceId1'>
             FaceId of the first face, comes from Face - Detect
             </param>
             <param name='faceId2'>
             FaceId of the second face, comes from Face - Detect
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperationsExtensions.DetectWithUrlAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributeType},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Detect human faces in an image, return face rectangles, and optionally with
             faceIds, landmarks, and attributes.&lt;br /&gt;
             * Optional parameters including faceId, landmarks, and attributes.
             Attributes include age, gender, headPose, smile, facialHair, glasses,
             emotion, hair, makeup, occlusion, accessories, blur, exposure and noise.
             * The extracted face feature, instead of the actual image, will be stored
             on server. The faceId is an identifier of the face feature and will be used
             in [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239),
             [Face -
             Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a),
             and [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             It will expire 24 hours after the detection call.
             * Higher face image quality means better detection and recognition
             precision. Please consider high-quality faces: frontal, clear, and face
             size is 200x200 pixels (100 pixels between eyes) or bigger.
             * JPEG, PNG, GIF (the first frame), and BMP format are supported. The
             allowed image file size is from 1KB to 6MB.
             * Faces are detectable when its size is 36x36 to 4096x4096 pixels. If need
             to detect very small but clear faces, please try to enlarge the input
             image.
             * Up to 64 faces can be returned for an image. Faces are ranked by face
             rectangle size from large to small.
             * Face detector prefer frontal and near-frontal faces. There are cases that
             faces may not be detected, e.g. exceptionally large face angles (head-pose)
             or being occluded, or wrong image orientation.
             * Attributes (age, gender, headPose, smile, facialHair, glasses, emotion,
             hair, makeup, occlusion, accessories, blur, exposure and noise) may not be
             perfectly accurate. HeadPose's pitch value is a reserved field and will
             always return 0.
             * Different 'recognitionModel' values are provided. If follow-up operations
             like Verify, Identify, Find Similar are needed, please specify the
             recognition model with 'recognitionModel' parameter. The default value for
             'recognitionModel' is 'recognition_01', if latest model needed, please
             explicitly specify the model you need in this parameter. Once specified,
             the detected faceIds will be associated with the specified recognition
             model. More details, please refer to [How to specify a recognition
             model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='url'>
             Publicly reachable URL of an image
             </param>
             <param name='returnFaceId'>
             A value indicating whether the operation should return faceIds of detected
             faces.
             </param>
             <param name='returnFaceLandmarks'>
             A value indicating whether the operation should return landmarks of the
             detected faces.
             </param>
             <param name='returnFaceAttributes'>
             Analyze and return the one or more specified face attributes in the
             comma-separated string like "returnFaceAttributes=age,gender". Supported
             face attributes include age, gender, headPose, smile, facialHair, glasses
             and emotion. Note that each face attribute analysis has additional
             computational and time cost.
             </param>
             <param name='recognitionModel'>
             Name of recognition model. Recognition model is used when the face features
             are extracted and associated with detected faceIds, (Large)FaceList or
             (Large)PersonGroup. A recognition model name can be provided when
             performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup
             - Create. The default value is 'recognition_01', if latest model needed,
             please explicitly specify the model you need. Possible values include:
             'recognition_01', 'recognition_02'
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperationsExtensions.VerifyFaceToPersonAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations,System.Guid,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Verify whether two faces belong to a same person. Compares a face Id with a
            Person Id
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='faceId'>
            FaceId of the face, comes from Face - Detect
            </param>
            <param name='personId'>
            Specify a certain person in a person group or a large person group.
            personId is created in PersonGroup Person - Create or LargePersonGroup
            Person - Create.
            </param>
            <param name='personGroupId'>
            Using existing personGroupId and personId for fast loading a specified
            person. personGroupId is created in PersonGroup - Create. Parameter
            personGroupId and largePersonGroupId should not be provided at the same
            time.
            </param>
            <param name='largePersonGroupId'>
            Using existing largePersonGroupId and personId for fast loading a specified
            person. largePersonGroupId is created in LargePersonGroup - Create.
            Parameter personGroupId and largePersonGroupId should not be provided at
            the same time.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.FaceOperationsExtensions.DetectWithStreamAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations,System.IO.Stream,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributeType},System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Detect human faces in an image and returns face locations, and optionally
            with faceIds, landmarks, and attributes.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='returnFaceId'>
            A value indicating whether the operation should return faceIds of detected
            faces.
            </param>
            <param name='returnFaceLandmarks'>
            A value indicating whether the operation should return landmarks of the
            detected faces.
            </param>
            <param name='returnFaceAttributes'>
            Analyze and return the one or more specified face attributes in the
            comma-separated string like "returnFaceAttributes=age,gender". Supported
            face attributes include age, gender, headPose, smile, facialHair, glasses
            and emotion. Note that each face attribute analysis has additional
            computational and time cost.
            </param>
            <param name='recognitionModel'>
            Name of recognition model. Recognition model is used when the face features
            are extracted and associated with detected faceIds, (Large)FaceList or
            (Large)PersonGroup. A recognition model name can be provided when
            performing Face - Detect or (Large)FaceList - Create or (Large)PersonGroup
            - Create. The default value is 'recognition_01', if latest model needed,
            please explicitly specify the model you need. Possible values include:
            'recognition_01', 'recognition_02'
            </param>
            <param name='returnRecognitionModel'>
            A value indicating whether the operation should return 'recognitionModel'
            in response.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient">
            <summary>
            An API for face detection, verification, and identification.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.SerializationSettings">
            <summary>
            The base URI of the service.
            </summary>
            <summary>
            Gets or sets json serialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.DeserializationSettings">
            <summary>
            Gets or sets json deserialization settings.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.Endpoint">
            <summary>
            Supported Cognitive Services endpoints (protocol and hostname, for
            example: https://westus.api.cognitive.microsoft.com).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.Credentials">
            <summary>
            Subscription credentials which uniquely identify client
            subscription.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.Face">
            <summary>
            Gets the IFaceOperations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.PersonGroupPerson">
            <summary>
            Gets the IPersonGroupPerson.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.PersonGroup">
            <summary>
            Gets the IPersonGroupOperations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.FaceList">
            <summary>
            Gets the IFaceListOperations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.LargePersonGroupPerson">
            <summary>
            Gets the ILargePersonGroupPerson.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.LargePersonGroup">
            <summary>
            Gets the ILargePersonGroupOperations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.LargeFaceList">
            <summary>
            Gets the ILargeFaceListOperations.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceClient.Snapshot">
            <summary>
            Gets the ISnapshotOperations.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations">
            <summary>
            FaceListOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create an empty face list with user-specified faceListId, name, an
             optional userData and recognitionModel. Up to 64 face lists are
             allowed in one subscription.
             &lt;br /&gt; Face list is a list of faces, up to 1,000 faces, and
             used by [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             &lt;br /&gt; After creation, user should use [FaceList - Add
             Face](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395250)
             to import the faces. Faces are stored on server until [FaceList -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524f)
             is called.
             &lt;br /&gt; Find Similar is used for scenario like finding
             celebrity-like faces, similar face filtering, or as a light way
             face identification. But if the actual use is to identify person,
             please use
             [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)
             /
             [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)
             and [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt; Please consider
             [LargeFaceList](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)
             when the face number is large. It can support up to 1,000,000
             faces. 'recognitionModel' should be specified to associate with
             this face list. The default value for 'recognitionModel' is
             'recognition_01', if the latest model needed, please explicitly
             specify the model you need in this parameter. New faces that are
             added to an existing face list will use the recognition model
             that's already associated with the collection. Existing face
             features in a face list can't be updated to features extracted by
             another version of recognition model.
            
             </summary>
             <param name='faceListId'>
             Id referencing a particular face list.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations.GetWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Retrieve a face list’s faceListId, name, userData, recognitionModel
             and faces in the face list.
            
             </summary>
             <param name='faceListId'>
             Id referencing a particular face list.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return
             'recognitionModel' in response.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations.UpdateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update information of a face list.
            </summary>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations.DeleteWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing face list according to faceListId. Persisted
            face images in the face list will also be deleted.
            </summary>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations.ListWithHttpMessagesAsync(System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             List face lists’ faceListId, name, userData and recognitionModel.
             &lt;br /&gt;
             To get face information inside faceList use [FaceList -
             Get](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524c)
            
             </summary>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return
             'recognitionModel' in response.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations.DeleteFaceWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing face from a face list (given by a
            persistedFaceId and a faceListId). Persisted image related to the
            face will also be deleted.
            </summary>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations.AddFaceFromUrlWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a face to a face list. The input face is specified as an image
            with a targetFace rectangle. It returns a persistedFaceId
            representing the added face, and persistedFaceId will not expire.
            </summary>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum
            length is 1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person
            in the format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the
            image, targetFace is required to specify which face to add. No
            targetFace means there is only one face detected in the entire
            image.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceListOperations.AddFaceFromStreamWithHttpMessagesAsync(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a face to a face list. The input face is specified as an image
            with a targetFace rectangle. It returns a persistedFaceId
            representing the added face, and persistedFaceId will not expire.
            </summary>
            <param name='faceListId'>
            Id referencing a particular face list.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum
            length is 1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person
            in the format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the
            image, targetFace is required to specify which face to add. No
            targetFace means there is only one face detected in the entire
            image.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations">
            <summary>
            FaceOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations.FindSimilarWithHttpMessagesAsync(System.Guid,System.String,System.String,System.Collections.Generic.IList{System.Nullable{System.Guid}},System.Nullable{System.Int32},Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarMatchMode,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Given query face's faceId, to search the similar-looking faces from
             a faceId array, a face list or a large face list. faceId array
             contains the faces created by [Face -
             Detect](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395236),
             which will expire 24 hours after creation. A "faceListId" is
             created by [FaceList -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039524b)
             containing persistedFaceIds that will not expire. And a
             "largeFaceListId" is created by [LargeFaceList -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/5a157b68d2de3616c086f2cc)
             containing persistedFaceIds that will also not expire. Depending on
             the input the returned similar faces list contains faceIds or
             persistedFaceIds ranked by similarity.
             &lt;br/&gt;Find similar has two working modes, "matchPerson" and
             "matchFace". "matchPerson" is the default mode that it tries to
             find faces of the same person as possible by using internal
             same-person thresholds. It is useful to find a known person's other
             photos. Note that an empty list will be returned if no faces pass
             the internal thresholds. "matchFace" mode ignores same-person
             thresholds and returns ranked similar faces anyway, even the
             similarity is low. It can be used in the cases like searching
             celebrity-looking faces.
             &lt;br/&gt;The 'recognitionModel' associated with the query face's
             faceId should be the same as the 'recognitionModel' used by the
             target faceId array, face list or large face list.
            
             </summary>
             <param name='faceId'>
             FaceId of the query face. User needs to call Face - Detect first to
             get a valid faceId. Note that this faceId is not persisted and will
             expire 24 hours after the detection call
             </param>
             <param name='faceListId'>
             An existing user-specified unique candidate face list, created in
             Face List - Create a Face List. Face list contains a set of
             persistedFaceIds which are persisted and will never expire.
             Parameter faceListId, largeFaceListId and faceIds should not be
             provided at the same time.
             </param>
             <param name='largeFaceListId'>
             An existing user-specified unique candidate large face list,
             created in LargeFaceList - Create. Large face list contains a set
             of persistedFaceIds which are persisted and will never expire.
             Parameter faceListId, largeFaceListId and faceIds should not be
             provided at the same time.
             </param>
             <param name='faceIds'>
             An array of candidate faceIds. All of them are created by Face -
             Detect and the faceIds will expire 24 hours after the detection
             call. The number of faceIds is limited to 1000. Parameter
             faceListId, largeFaceListId and faceIds should not be provided at
             the same time.
             </param>
             <param name='maxNumOfCandidatesReturned'>
             The number of top similar faces returned. The valid range is [1,
             1000].
             </param>
             <param name='mode'>
             Similar face searching mode. It can be "matchPerson" or
             "matchFace". Possible values include: 'matchPerson', 'matchFace'
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations.GroupWithHttpMessagesAsync(System.Collections.Generic.IList{System.Guid},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Divide candidate faces into groups based on face similarity.&lt;br
             /&gt;
             * The output is one or more disjointed face groups and a
             messyGroup. A face group contains faces that have similar looking,
             often of the same person. Face groups are ranked by group size,
             i.e. number of faces. Notice that faces belonging to a same person
             might be split into several groups in the result.
             * MessyGroup is a special face group containing faces that cannot
             find any similar counterpart face from original faces. The
             messyGroup will not appear in the result if all faces found their
             counterparts.
             * Group API needs at least 2 candidate faces and 1000 at most. We
             suggest to try [Face -
             Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a)
             when you only have 2 candidate faces.
             * The 'recognitionModel' associated with the query faces' faceIds
             should be the same.
            
             </summary>
             <param name='faceIds'>
             Array of candidate faceId created by Face - Detect. The maximum is
             1000 faces
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations.IdentifyWithHttpMessagesAsync(System.Collections.Generic.IList{System.Guid},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Double},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             1-to-many identification to find the closest matches of the
             specific query person face from a person group or large person
             group.
             &lt;br/&gt; For each face in the faceIds array, Face Identify will
             compute similarities between the query face and all the faces in
             the person group (given by personGroupId) or large person group
             (given by largePersonGroupId), and return candidate person(s) for
             that face ranked by similarity confidence. The person group/large
             person group should be trained to make it ready for identification.
             See more in [PersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)
             and [LargePersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4).
             &lt;br/&gt;
            
             Remarks:&lt;br /&gt;
             * The algorithm allows more than one face to be identified
             independently at the same request, but no more than 10 faces.
             * Each person in the person group/large person group could have
             more than one face, but no more than 248 faces.
             * Higher face image quality means better identification precision.
             Please consider high-quality faces: frontal, clear, and face size
             is 200x200 pixels (100 pixels between eyes) or bigger.
             * Number of candidates returned is restricted by
             maxNumOfCandidatesReturned and confidenceThreshold. If no person is
             identified, the returned candidates will be an empty array.
             * Try [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237)
             when you need to find similar faces from a face list/large face
             list instead of a person group/large person group.
             * The 'recognitionModel' associated with the query faces' faceIds
             should be the same as the 'recognitionModel' used by the target
             person group or large person group.
            
             </summary>
             <param name='faceIds'>
             Array of query faces faceIds, created by the Face - Detect. Each of
             the faces are identified independently. The valid number of faceIds
             is between [1, 10].
             </param>
             <param name='personGroupId'>
             PersonGroupId of the target person group, created by PersonGroup -
             Create. Parameter personGroupId and largePersonGroupId should not
             be provided at the same time.
             </param>
             <param name='largePersonGroupId'>
             LargePersonGroupId of the target large person group, created by
             LargePersonGroup - Create. Parameter personGroupId and
             largePersonGroupId should not be provided at the same time.
             </param>
             <param name='maxNumOfCandidatesReturned'>
             The range of maxNumOfCandidatesReturned is between 1 and 5 (default
             is 1).
             </param>
             <param name='confidenceThreshold'>
             Confidence threshold of identification, used to judge whether one
             face belong to one person. The range of confidenceThreshold is [0,
             1] (default specified by algorithm).
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations.VerifyFaceToFaceWithHttpMessagesAsync(System.Guid,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Verify whether two faces belong to a same person or whether one
             face belongs to a person.
             &lt;br/&gt;
             Remarks:&lt;br /&gt;
             * Higher face image quality means better identification precision.
             Please consider high-quality faces: frontal, clear, and face size
             is 200x200 pixels (100 pixels between eyes) or bigger.
             * For the scenarios that are sensitive to accuracy please make your
             own judgment.
             * The 'recognitionModel' associated with the query faces' faceIds
             should be the same as the 'recognitionModel' used by the target
             face, person group or large person group.
            
             </summary>
             <param name='faceId1'>
             FaceId of the first face, comes from Face - Detect
             </param>
             <param name='faceId2'>
             FaceId of the second face, comes from Face - Detect
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations.DetectWithUrlWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributeType},System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Detect human faces in an image, return face rectangles, and
             optionally with faceIds, landmarks, and attributes.&lt;br /&gt;
             * Optional parameters including faceId, landmarks, and attributes.
             Attributes include age, gender, headPose, smile, facialHair,
             glasses, emotion, hair, makeup, occlusion, accessories, blur,
             exposure and noise.
             * The extracted face feature, instead of the actual image, will be
             stored on server. The faceId is an identifier of the face feature
             and will be used in [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239),
             [Face -
             Verify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523a),
             and [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             It will expire 24 hours after the detection call.
             * Higher face image quality means better detection and recognition
             precision. Please consider high-quality faces: frontal, clear, and
             face size is 200x200 pixels (100 pixels between eyes) or bigger.
             * JPEG, PNG, GIF (the first frame), and BMP format are supported.
             The allowed image file size is from 1KB to 6MB.
             * Faces are detectable when its size is 36x36 to 4096x4096 pixels.
             If need to detect very small but clear faces, please try to enlarge
             the input image.
             * Up to 64 faces can be returned for an image. Faces are ranked by
             face rectangle size from large to small.
             * Face detector prefer frontal and near-frontal faces. There are
             cases that faces may not be detected, e.g. exceptionally large face
             angles (head-pose) or being occluded, or wrong image orientation.
             * Attributes (age, gender, headPose, smile, facialHair, glasses,
             emotion, hair, makeup, occlusion, accessories, blur, exposure and
             noise) may not be perfectly accurate. HeadPose's pitch value is a
             reserved field and will always return 0.
             * Different 'recognitionModel' values are provided. If follow-up
             operations like Verify, Identify, Find Similar are needed, please
             specify the recognition model with 'recognitionModel' parameter.
             The default value for 'recognitionModel' is 'recognition_01', if
             latest model needed, please explicitly specify the model you need
             in this parameter. Once specified, the detected faceIds will be
             associated with the specified recognition model. More details,
             please refer to [How to specify a recognition
             model](https://docs.microsoft.com/en-us/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model)
            
             </summary>
             <param name='url'>
             Publicly reachable URL of an image
             </param>
             <param name='returnFaceId'>
             A value indicating whether the operation should return faceIds of
             detected faces.
             </param>
             <param name='returnFaceLandmarks'>
             A value indicating whether the operation should return landmarks of
             the detected faces.
             </param>
             <param name='returnFaceAttributes'>
             Analyze and return the one or more specified face attributes in the
             comma-separated string like "returnFaceAttributes=age,gender".
             Supported face attributes include age, gender, headPose, smile,
             facialHair, glasses and emotion. Note that each face attribute
             analysis has additional computational and time cost.
             </param>
             <param name='recognitionModel'>
             Name of recognition model. Recognition model is used when the face
             features are extracted and associated with detected faceIds,
             (Large)FaceList or (Large)PersonGroup. A recognition model name can
             be provided when performing Face - Detect or (Large)FaceList -
             Create or (Large)PersonGroup - Create. The default value is
             'recognition_01', if latest model needed, please explicitly specify
             the model you need. Possible values include: 'recognition_01',
             'recognition_02'
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return
             'recognitionModel' in response.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations.VerifyFaceToPersonWithHttpMessagesAsync(System.Guid,System.Guid,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Verify whether two faces belong to a same person. Compares a face
            Id with a Person Id
            </summary>
            <param name='faceId'>
            FaceId of the face, comes from Face - Detect
            </param>
            <param name='personId'>
            Specify a certain person in a person group or a large person group.
            personId is created in PersonGroup Person - Create or
            LargePersonGroup Person - Create.
            </param>
            <param name='personGroupId'>
            Using existing personGroupId and personId for fast loading a
            specified person. personGroupId is created in PersonGroup - Create.
            Parameter personGroupId and largePersonGroupId should not be
            provided at the same time.
            </param>
            <param name='largePersonGroupId'>
            Using existing largePersonGroupId and personId for fast loading a
            specified person. largePersonGroupId is created in LargePersonGroup
            - Create. Parameter personGroupId and largePersonGroupId should not
            be provided at the same time.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IFaceOperations.DetectWithStreamWithHttpMessagesAsync(System.IO.Stream,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributeType},System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Detect human faces in an image and returns face locations, and
            optionally with faceIds, landmarks, and attributes.
            </summary>
            <param name='image'>
            An image stream.
            </param>
            <param name='returnFaceId'>
            A value indicating whether the operation should return faceIds of
            detected faces.
            </param>
            <param name='returnFaceLandmarks'>
            A value indicating whether the operation should return landmarks of
            the detected faces.
            </param>
            <param name='returnFaceAttributes'>
            Analyze and return the one or more specified face attributes in the
            comma-separated string like "returnFaceAttributes=age,gender".
            Supported face attributes include age, gender, headPose, smile,
            facialHair, glasses and emotion. Note that each face attribute
            analysis has additional computational and time cost.
            </param>
            <param name='recognitionModel'>
            Name of recognition model. Recognition model is used when the face
            features are extracted and associated with detected faceIds,
            (Large)FaceList or (Large)PersonGroup. A recognition model name can
            be provided when performing Face - Detect or (Large)FaceList -
            Create or (Large)PersonGroup - Create. The default value is
            'recognition_01', if latest model needed, please explicitly specify
            the model you need. Possible values include: 'recognition_01',
            'recognition_02'
            </param>
            <param name='returnRecognitionModel'>
            A value indicating whether the operation should return
            'recognitionModel' in response.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations">
            <summary>
            LargeFaceListOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create an empty large face list with user-specified
             largeFaceListId, name, an optional userData and recognitionModel.
             &lt;br /&gt; Large face list is a list of faces, up to 1,000,000
             faces, and used by [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             &lt;br /&gt; After creation, user should use [LargeFaceList Face -
             Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3)
             to import the faces and [LargeFaceList -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1)
             to make it ready for [Face -
             FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             Faces are stored on server until [LargeFaceList -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd)
             is called.
             &lt;br /&gt; Find Similar is used for scenario like finding
             celebrity-like faces, similar face filtering, or as a light way
             face identification. But if the actual use is to identify person,
             please use
             [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)
             /
             [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)
             and [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt;
             * Free-tier subscription quota: 64 large face lists.
             * S0-tier subscription quota: 1,000,000 large face lists.
             &lt;br /&gt;
             'recognitionModel' should be specified to associate with this large
             face list. The default value for 'recognitionModel' is
             'recognition_01', if the latest model needed, please explicitly
             specify the model you need in this parameter. New faces that are
             added to an existing large face list will use the recognition model
             that's already associated with the collection. Existing face
             features in a large face list can't be updated to features
             extracted by another version of recognition model.
            
             </summary>
             <param name='largeFaceListId'>
             Id referencing a particular large face list.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.GetWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve a large face list’s largeFaceListId, name, userData and
            recognitionModel.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='returnRecognitionModel'>
            A value indicating whether the operation should return
            'recognitionModel' in response.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.UpdateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update information of a large face list.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.DeleteWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing large face list according to faceListId.
            Persisted face images in the large face list will also be deleted.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.GetTrainingStatusWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve the training status of a large face list (completed or
            ongoing).
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.ListWithHttpMessagesAsync(System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             List large face lists’ information of largeFaceListId, name,
             userData and recognitionModel. &lt;br /&gt;
             To get face information inside largeFaceList use [LargeFaceList
             Face -
             Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br
             /&gt;
             * Large face lists are stored in alphabetical order of
             largeFaceListId.
             * "start" parameter (string, optional) is a user-provided
             largeFaceListId value that returned entries have larger ids by
             string comparison. "start" set to empty to indicate return from the
             first item.
             * "top" parameter (int, optional) specifies the number of entries
             to return. A maximal of 1000 entries can be returned in one call.
             To fetch more, you can specify "start" with the last retuned
             entry’s Id of the current call.
             &lt;br /&gt;
             For example, total 5 large person lists: "list1", ..., "list5".
             &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
             &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
             &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4",
             "list5".
            
             </summary>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return
             'recognitionModel' in response.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.TrainWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Queue a large face list training task, the training task may not be
            started immediately.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.DeleteFaceWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing face from a large face list (given by a
            persistedFaceId and a largeFaceListId). Persisted image related to
            the face will also be deleted.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.GetFaceWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a persisted face (specified by
            persistedFaceId and its belonging largeFaceListId).
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.UpdateFaceWithHttpMessagesAsync(System.String,System.Guid,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update a persisted face's userData field.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='userData'>
            User-provided data attached to the face. The size limit is 1KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.AddFaceFromUrlWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a face to a large face list. The input face is specified as an
            image with a targetFace rectangle. It returns a persistedFaceId
            representing the added face, and persistedFaceId will not expire.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum
            length is 1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person
            in the format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the
            image, targetFace is required to specify which face to add. No
            targetFace means there is only one face detected in the entire
            image.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.ListFacesWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            List all faces in a large face list, and retrieve face information
            (including userData and persistedFaceIds of registered faces of the
            face).
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='start'>
            Starting face id to return (used to list a range of faces).
            </param>
            <param name='top'>
            Number of faces to return starting with the face id indicated by
            the 'start' parameter.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations.AddFaceFromStreamWithHttpMessagesAsync(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a face to a large face list. The input face is specified as an
            image with a targetFace rectangle. It returns a persistedFaceId
            representing the added face, and persistedFaceId will not expire.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum
            length is 1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person
            in the format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the
            image, targetFace is required to specify which face to add. No
            targetFace means there is only one face detected in the entire
            image.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations">
            <summary>
            LargePersonGroupOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create a new large person group with user-specified
             largePersonGroupId, name, an optional userData and
             recognitionModel.
             &lt;br /&gt; A large person group is the container of the uploaded
             person data, including face images and face recognition feature,
             and up to 1,000,000 people.
             &lt;br /&gt; After creation, use [LargePersonGroup Person -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40)
             to add person into the group, and call [LargePersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4)
             to get this group ready for [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt; The person face, image, and userData will be stored on
             server until [LargePersonGroup Person -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2)
             or [LargePersonGroup -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f)
             is called.
             &lt;br /&gt;
             * Free-tier subscription quota: 1,000 large person groups.
             * S0-tier subscription quota: 1,000,000 large person groups.
             &lt;br /&gt;
             'recognitionModel' should be specified to associate with this large
             person group. The default value for 'recognitionModel' is
             'recognition_01', if the latest model needed, please explicitly
             specify the model you need in this parameter. New faces that are
             added to an existing large person group will use the recognition
             model that's already associated with the collection. Existing face
             features in a large person group can't be updated to features
             extracted by another version of recognition model.
            
             </summary>
             <param name='largePersonGroupId'>
             Id referencing a particular large person group.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations.DeleteWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing large person group. Persisted face features of
            all people in the large person group will also be deleted.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations.GetWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Retrieve the information of a large person group, including its
             name, userData and recognitionModel. This API returns large person
             group information only, use [LargePersonGroup Person -
             List](/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1)
             instead to retrieve person information under the large person
             group.
            
             </summary>
             <param name='largePersonGroupId'>
             Id referencing a particular large person group.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return
             'recognitionModel' in response.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations.UpdateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update an existing large person group's display name and userData.
            The properties which does not appear in request body will not be
            updated.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations.GetTrainingStatusWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve the training status of a large person group (completed or
            ongoing).
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations.ListWithHttpMessagesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             List all existing large person groups’s largePersonGroupId, name,
             userData and recognitionModel.&lt;br /&gt;
             * Large person groups are stored in alphabetical order of
             largePersonGroupId.
             * "start" parameter (string, optional) is a user-provided
             largePersonGroupId value that returned entries have larger ids by
             string comparison. "start" set to empty to indicate return from the
             first item.
             * "top" parameter (int, optional) specifies the number of entries
             to return. A maximal of 1000 entries can be returned in one call.
             To fetch more, you can specify "start" with the last retuned
             entry’s Id of the current call.
             &lt;br /&gt;
             For example, total 5 large person groups: "group1", ..., "group5".
             &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
             &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
             &lt;br /&gt; "start=group2&amp;top=3" will return "group3",
             "group4", "group5".
            
             </summary>
             <param name='start'>
             List large person groups from the least largePersonGroupId greater
             than the "start".
             </param>
             <param name='top'>
             The number of large person groups to list.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return
             'recognitionModel' in response.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations.TrainWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Queue a large person group training task, the training task may not
            be started immediately.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson">
            <summary>
            LargePersonGroupPerson operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Create a new person in a specified large person group.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson.ListWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            List all persons in a large person group, and retrieve person
            information (including personId, name, userData and
            persistedFaceIds of registered faces of the person).
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='start'>
            Starting person id to return (used to list a range of persons).
            </param>
            <param name='top'>
            Number of persons to return starting with the person id indicated
            by the 'start' parameter.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson.DeleteWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing person from a large person group. All stored
            person data, and face features in the person entry will be deleted.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson.GetWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve a person's information, including registered persisted
            faces, name and userData.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson.UpdateWithHttpMessagesAsync(System.String,System.Guid,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update name or userData of a person.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson.DeleteFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete a face from a person. Relative feature for the persisted
            face will also be deleted.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson.GetFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a persisted face (specified by
            persistedFaceId, personId and its belonging largePersonGroupId).
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson.UpdateFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update a person persisted face's userData field.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='userData'>
            User-provided data attached to the face. The size limit is 1KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson.AddFaceFromUrlWithHttpMessagesAsync(System.String,System.Guid,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input
            face is specified as an image with a targetFace rectangle.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum
            length is 1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person
            in the format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the
            image, targetFace is required to specify which face to add. No
            targetFace means there is only one face detected in the entire
            image.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson.AddFaceFromStreamWithHttpMessagesAsync(System.String,System.Guid,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input
            face is specified as an image with a targetFace rectangle.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum
            length is 1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person
            in the format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the
            image, targetFace is required to specify which face to add. No
            targetFace means there is only one face detected in the entire
            image.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations">
            <summary>
            PersonGroupOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create a new person group with specified personGroupId, name,
             user-provided userData and recognitionModel.
             &lt;br /&gt; A person group is the container of the uploaded person
             data, including face images and face recognition features.
             &lt;br /&gt; After creation, use [PersonGroup Person -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c)
             to add persons into the group, and then call [PersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)
             to get this group ready for [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt; The person's face, image, and userData will be stored
             on server until [PersonGroup Person -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)
             or [PersonGroup -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)
             is called.
             &lt;br /&gt;
             * Free-tier subscription quota: 1,000 person groups. Each holds up
             to 1,000 persons.
             * S0-tier subscription quota: 1,000,000 person groups. Each holds
             up to 10,000 persons.
             * to handle larger scale face identification problem, please
             consider using
             [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
             &lt;br /&gt;
             'recognitionModel' should be specified to associate with this
             person group. The default value for 'recognitionModel' is
             'recognition_01', if the latest model needed, please explicitly
             specify the model you need in this parameter. New faces that are
             added to an existing person group will use the recognition model
             that's already associated with the collection. Existing face
             features in a person group can't be updated to features extracted
             by another version of recognition model.
            
             </summary>
             <param name='personGroupId'>
             Id referencing a particular person group.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations.DeleteWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing person group. Persisted face features of all
            people in the person group will also be deleted.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations.GetWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve person group name, userData and recognitionModel. To get
            person information under this personGroup, use [PersonGroup Person
            -
            List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='returnRecognitionModel'>
            A value indicating whether the operation should return
            'recognitionModel' in response.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations.UpdateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update an existing person group's display name and userData. The
            properties which does not appear in request body will not be
            updated.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations.GetTrainingStatusWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve the training status of a person group (completed or
            ongoing).
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations.ListWithHttpMessagesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             List person groups’s personGroupId, name, userData and
             recognitionModel.&lt;br /&gt;
             * Person groups are stored in alphabetical order of personGroupId.
             * "start" parameter (string, optional) is a user-provided
             personGroupId value that returned entries have larger ids by string
             comparison. "start" set to empty to indicate return from the first
             item.
             * "top" parameter (int, optional) specifies the number of entries
             to return. A maximal of 1000 entries can be returned in one call.
             To fetch more, you can specify "start" with the last retuned
             entry’s Id of the current call.
             &lt;br /&gt;
             For example, total 5 person groups: "group1", ..., "group5".
             &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
             &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
             &lt;br /&gt; "start=group2&amp;top=3" will return "group3",
             "group4", "group5".
            
             </summary>
             <param name='start'>
             List person groups from the least personGroupId greater than the
             "start".
             </param>
             <param name='top'>
             The number of person groups to list.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return
             'recognitionModel' in response.
             </param>
             <param name='customHeaders'>
             The headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations.TrainWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Queue a person group training task, the training task may not be
            started immediately.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson">
            <summary>
            PersonGroupPerson operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Create a new person in a specified person group.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson.ListWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            List all persons in a person group, and retrieve person information
            (including personId, name, userData and persistedFaceIds of
            registered faces of the person).
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='start'>
            Starting person id to return (used to list a range of persons).
            </param>
            <param name='top'>
            Number of persons to return starting with the person id indicated
            by the 'start' parameter.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson.DeleteWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing person from a person group. All stored person
            data, and face features in the person entry will be deleted.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson.GetWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve a person's information, including registered persisted
            faces, name and userData.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson.UpdateWithHttpMessagesAsync(System.String,System.Guid,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update name or userData of a person.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson.DeleteFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete a face from a person. Relative feature for the persisted
            face will also be deleted.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson.GetFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a persisted face (specified by
            persistedFaceId, personId and its belonging personGroupId).
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson.UpdateFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update a person persisted face's userData field.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='userData'>
            User-provided data attached to the face. The size limit is 1KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson.AddFaceFromUrlWithHttpMessagesAsync(System.String,System.Guid,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input
            face is specified as an image with a targetFace rectangle.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum
            length is 1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person
            in the format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the
            image, targetFace is required to specify which face to add. No
            targetFace means there is only one face detected in the entire
            image.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson.AddFaceFromStreamWithHttpMessagesAsync(System.String,System.Guid,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input
            face is specified as an image with a targetFace rectangle.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum
            length is 1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person
            in the format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the
            image, targetFace is required to specify which face to add. No
            targetFace means there is only one face detected in the entire
            image.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations">
            <summary>
            SnapshotOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations.TakeWithHttpMessagesAsync(Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotObjectType,System.String,System.Collections.Generic.IList{System.Guid},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Submit an operation to take a snapshot of face list, large face
            list, person group or large person group, with user-specified
            snapshot type, source object id, apply scope and an optional user
            data.&lt;br /&gt;
            The snapshot interfaces are for users to backup and restore their
            face data from one face subscription to another, inside same region
            or across regions. The workflow contains two phases, user first
            calls Snapshot - Take to create a copy of the source object and
            store it as a snapshot, then calls Snapshot - Apply to paste the
            snapshot to target subscription. The snapshots are stored in a
            centralized location (per Azure instance), so that they can be
            applied cross accounts and regions.&lt;br /&gt;
            Taking snapshot is an asynchronous operation. An operation id can
            be obtained from the "Operation-Location" field in response header,
            to be used in OperationStatus - Get for tracking the progress of
            creating the snapshot. The snapshot id will be included in the
            "resourceLocation" field in OperationStatus - Get response when the
            operation status is "succeeded".&lt;br /&gt;
            Snapshot taking time depends on the number of person and face
            entries in the source object. It could be in seconds, or up to
            several hours for 1,000,000 persons with multiple faces.&lt;br
            /&gt;
            Snapshots will be automatically expired and cleaned in 48 hours
            after it is created by Snapshot - Take. User can delete the
            snapshot using Snapshot - Delete by themselves any time before
            expiration.&lt;br /&gt;
            Taking snapshot for a certain object will not block any other
            operations against the object. All read-only operations (Get/List
            and Identify/FindSimilar/Verify) can be conducted as usual. For all
            writable operations, including Add/Update/Delete the source object
            or its persons/faces and Train, they are not blocked but not
            recommended because writable updates may not be reflected on the
            snapshot during its taking. After snapshot taking is completed, all
            readable and writable operations can work as normal. Snapshot will
            also include the training results of the source object, which means
            target subscription the snapshot applied to does not need re-train
            the target object before calling Identify/FindSimilar.&lt;br /&gt;
            * Free-tier subscription quota: 100 take operations per month.
            * S0-tier subscription quota: 100 take operations per day.
            </summary>
            <param name='type'>
            User specified type for the source object to take snapshot from.
            Currently FaceList, PersonGroup, LargeFaceList and LargePersonGroup
            are supported. Possible values include: 'FaceList',
            'LargeFaceList', 'LargePersonGroup', 'PersonGroup'
            </param>
            <param name='objectId'>
            User specified source object id to take snapshot from.
            </param>
            <param name='applyScope'>
            User specified array of target Face subscription ids for the
            snapshot. For each snapshot, only subscriptions included in the
            applyScope of Snapshot - Take can apply it.
            </param>
            <param name='userData'>
            User specified data about the snapshot for any purpose. Length
            should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations.ListWithHttpMessagesAsync(System.Nullable{Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotObjectType},System.Collections.Generic.IList{System.Guid},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            List all accessible snapshots with related information, including
            snapshots that were taken by the user, or snapshots to be applied
            to the user (subscription id was included in the applyScope in
            Snapshot - Take).
            </summary>
            <param name='type'>
            User specified object type as a search filter. Possible values
            include: 'FaceList', 'LargeFaceList', 'LargePersonGroup',
            'PersonGroup'
            </param>
            <param name='applyScope'>
            User specified snapshot apply scopes as a search filter. ApplyScope
            is an array of the target Azure subscription ids for the snapshot,
            specified by the user who created the snapshot by Snapshot - Take.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations.GetWithHttpMessagesAsync(System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a snapshot. Snapshot is only accessible
            to the source subscription who took it, and target subscriptions
            included in the applyScope in Snapshot - Take.
            </summary>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations.UpdateWithHttpMessagesAsync(System.Guid,System.Collections.Generic.IList{System.Guid},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update the information of a snapshot. Only the source subscription
            who took the snapshot can update the snapshot.
            </summary>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='applyScope'>
            Array of the target Face subscription ids for the snapshot,
            specified by the user who created the snapshot when calling
            Snapshot - Take. For each snapshot, only subscriptions included in
            the applyScope of Snapshot - Take can apply it.
            </param>
            <param name='userData'>
            User specified data about the snapshot for any purpose. Length
            should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations.DeleteWithHttpMessagesAsync(System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing snapshot according to the snapshotId. All object
            data and information in the snapshot will also be deleted. Only the
            source subscription who took the snapshot can delete the snapshot.
            If the user does not delete a snapshot with this API, the snapshot
            will still be automatically deleted in 48 hours after creation.
            </summary>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations.ApplyWithHttpMessagesAsync(System.Guid,System.String,Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotApplyMode,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Submit an operation to apply a snapshot to current subscription.
            For each snapshot, only subscriptions included in the applyScope of
            Snapshot - Take can apply it.&lt;br /&gt;
            The snapshot interfaces are for users to backup and restore their
            face data from one face subscription to another, inside same region
            or across regions. The workflow contains two phases, user first
            calls Snapshot - Take to create a copy of the source object and
            store it as a snapshot, then calls Snapshot - Apply to paste the
            snapshot to target subscription. The snapshots are stored in a
            centralized location (per Azure instance), so that they can be
            applied cross accounts and regions.&lt;br /&gt;
            Applying snapshot is an asynchronous operation. An operation id can
            be obtained from the "Operation-Location" field in response header,
            to be used in OperationStatus - Get for tracking the progress of
            applying the snapshot. The target object id will be included in the
            "resourceLocation" field in OperationStatus - Get response when the
            operation status is "succeeded".&lt;br /&gt;
            Snapshot applying time depends on the number of person and face
            entries in the snapshot object. It could be in seconds, or up to 1
            hour for 1,000,000 persons with multiple faces.&lt;br /&gt;
            Snapshots will be automatically expired and cleaned in 48 hours
            after it is created by Snapshot - Take. So the target subscription
            is required to apply the snapshot in 48 hours since its
            creation.&lt;br /&gt;
            Applying a snapshot will not block any other operations against the
            target object, however it is not recommended because the
            correctness cannot be guaranteed during snapshot applying. After
            snapshot applying is completed, all operations towards the target
            object can work as normal. Snapshot also includes the training
            results of the source object, which means target subscription the
            snapshot applied to does not need re-train the target object before
            calling Identify/FindSimilar.&lt;br /&gt;
            One snapshot can be applied multiple times in parallel, while
            currently only CreateNew apply mode is supported, which means the
            apply operation will fail if target subscription already contains
            an object of same type and using the same objectId. Users can
            specify the "objectId" in request body to avoid such
            conflicts.&lt;br /&gt;
            * Free-tier subscription quota: 100 apply operations per month.
            * S0-tier subscription quota: 100 apply operations per day.
            </summary>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='objectId'>
            User specified target object id to be created from the snapshot.
            </param>
            <param name='mode'>
            Snapshot applying mode. Currently only CreateNew is supported,
            which means the apply operation will fail if target subscription
            already contains an object of same type and using the same
            objectId. Users can specify the "objectId" in request body to avoid
            such conflicts. Possible values include: 'CreateNew'
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations.GetOperationStatusWithHttpMessagesAsync(System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve the status of a take/apply snapshot operation.
            </summary>
            <param name='operationId'>
            Id referencing a particular take/apply snapshot operation.
            </param>
            <param name='customHeaders'>
            The headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations">
            <summary>
            LargeFaceListOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient)">
            <summary>
            Initializes a new instance of the LargeFaceListOperations class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.Client">
            <summary>
            Gets a reference to the FaceClient
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create an empty large face list with user-specified largeFaceListId, name,
             an optional userData and recognitionModel.
             &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and
             used by [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             &lt;br /&gt; After creation, user should use [LargeFaceList Face -
             Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3)
             to import the faces and [LargeFaceList -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1)
             to make it ready for [Face -
             FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             Faces are stored on server until [LargeFaceList -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd)
             is called.
             &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like
             faces, similar face filtering, or as a light way face identification. But
             if the actual use is to identify person, please use
             [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)
             /
             [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)
             and [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt;
             * Free-tier subscription quota: 64 large face lists.
             * S0-tier subscription quota: 1,000,000 large face lists.
             &lt;br /&gt;
             'recognitionModel' should be specified to associate with this large face
             list. The default value for 'recognitionModel' is 'recognition_01', if the
             latest model needed, please explicitly specify the model you need in this
             parameter. New faces that are added to an existing large face list will use
             the recognition model that's already associated with the collection.
             Existing face features in a large face list can't be updated to features
             extracted by another version of recognition model.
            
             </summary>
             <param name='largeFaceListId'>
             Id referencing a particular large face list.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.GetWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve a large face list’s largeFaceListId, name, userData and
            recognitionModel.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='returnRecognitionModel'>
            A value indicating whether the operation should return 'recognitionModel'
            in response.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.UpdateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update information of a large face list.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.DeleteWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing large face list according to faceListId. Persisted face
            images in the large face list will also be deleted.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.GetTrainingStatusWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve the training status of a large face list (completed or ongoing).
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.ListWithHttpMessagesAsync(System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             List large face lists’ information of largeFaceListId, name, userData and
             recognitionModel. &lt;br /&gt;
             To get face information inside largeFaceList use [LargeFaceList Face -
             Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br
             /&gt;
             * Large face lists are stored in alphabetical order of largeFaceListId.
             * "start" parameter (string, optional) is a user-provided largeFaceListId
             value that returned entries have larger ids by string comparison. "start"
             set to empty to indicate return from the first item.
             * "top" parameter (int, optional) specifies the number of entries to
             return. A maximal of 1000 entries can be returned in one call. To fetch
             more, you can specify "start" with the last retuned entry’s Id of the
             current call.
             &lt;br /&gt;
             For example, total 5 large person lists: "list1", ..., "list5".
             &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
             &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
             &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
            
             </summary>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.TrainWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Queue a large face list training task, the training task may not be started
            immediately.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.DeleteFaceWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing face from a large face list (given by a persistedFaceId
            and a largeFaceListId). Persisted image related to the face will also be
            deleted.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.GetFaceWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a persisted face (specified by persistedFaceId
            and its belonging largeFaceListId).
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.UpdateFaceWithHttpMessagesAsync(System.String,System.Guid,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update a persisted face's userData field.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='userData'>
            User-provided data attached to the face. The size limit is 1KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.AddFaceFromUrlWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a face to a large face list. The input face is specified as an image
            with a targetFace rectangle. It returns a persistedFaceId representing the
            added face, and persistedFaceId will not expire.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.ListFacesWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            List all faces in a large face list, and retrieve face information
            (including userData and persistedFaceIds of registered faces of the face).
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='start'>
            Starting face id to return (used to list a range of faces).
            </param>
            <param name='top'>
            Number of faces to return starting with the face id indicated by the
            'start' parameter.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperations.AddFaceFromStreamWithHttpMessagesAsync(System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a face to a large face list. The input face is specified as an image
            with a targetFace rectangle. It returns a persistedFaceId representing the
            added face, and persistedFaceId will not expire.
            </summary>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions">
            <summary>
            Extension methods for LargeFaceListOperations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.CreateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Create an empty large face list with user-specified largeFaceListId, name,
             an optional userData and recognitionModel.
             &lt;br /&gt; Large face list is a list of faces, up to 1,000,000 faces, and
             used by [Face - Find
             Similar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             &lt;br /&gt; After creation, user should use [LargeFaceList Face -
             Add](/docs/services/563879b61984550e40cbbe8d/operations/5a158c10d2de3616c086f2d3)
             to import the faces and [LargeFaceList -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/5a158422d2de3616c086f2d1)
             to make it ready for [Face -
             FindSimilar](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395237).
             Faces are stored on server until [LargeFaceList -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/5a1580d5d2de3616c086f2cd)
             is called.
             &lt;br /&gt; Find Similar is used for scenario like finding celebrity-like
             faces, similar face filtering, or as a light way face identification. But
             if the actual use is to identify person, please use
             [PersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395244)
             /
             [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d)
             and [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt;
             * Free-tier subscription quota: 64 large face lists.
             * S0-tier subscription quota: 1,000,000 large face lists.
             &lt;br /&gt;
             'recognitionModel' should be specified to associate with this large face
             list. The default value for 'recognitionModel' is 'recognition_01', if the
             latest model needed, please explicitly specify the model you need in this
             parameter. New faces that are added to an existing large face list will use
             the recognition model that's already associated with the collection.
             Existing face features in a large face list can't be updated to features
             extracted by another version of recognition model.
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='largeFaceListId'>
             Id referencing a particular large face list.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.GetAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Retrieve a large face list’s largeFaceListId, name, userData and
            recognitionModel.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='returnRecognitionModel'>
            A value indicating whether the operation should return 'recognitionModel'
            in response.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.UpdateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update information of a large face list.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.DeleteAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete an existing large face list according to faceListId. Persisted face
            images in the large face list will also be deleted.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.GetTrainingStatusAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve the training status of a large face list (completed or ongoing).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.ListAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             List large face lists’ information of largeFaceListId, name, userData and
             recognitionModel. &lt;br /&gt;
             To get face information inside largeFaceList use [LargeFaceList Face -
             Get](/docs/services/563879b61984550e40cbbe8d/operations/5a158cf2d2de3616c086f2d5)&lt;br
             /&gt;
             * Large face lists are stored in alphabetical order of largeFaceListId.
             * "start" parameter (string, optional) is a user-provided largeFaceListId
             value that returned entries have larger ids by string comparison. "start"
             set to empty to indicate return from the first item.
             * "top" parameter (int, optional) specifies the number of entries to
             return. A maximal of 1000 entries can be returned in one call. To fetch
             more, you can specify "start" with the last retuned entry’s Id of the
             current call.
             &lt;br /&gt;
             For example, total 5 large person lists: "list1", ..., "list5".
             &lt;br /&gt; "start=&amp;top=" will return all 5 lists.
             &lt;br /&gt; "start=&amp;top=2" will return "list1", "list2".
             &lt;br /&gt; "start=list2&amp;top=3" will return "list3", "list4", "list5".
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.TrainAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Queue a large face list training task, the training task may not be started
            immediately.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.DeleteFaceAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete an existing face from a large face list (given by a persistedFaceId
            and a largeFaceListId). Persisted image related to the face will also be
            deleted.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.GetFaceAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a persisted face (specified by persistedFaceId
            and its belonging largeFaceListId).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.UpdateFaceAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Update a persisted face's userData field.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='userData'>
            User-provided data attached to the face. The size limit is 1KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.AddFaceFromUrlAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add a face to a large face list. The input face is specified as an image
            with a targetFace rectangle. It returns a persistedFaceId representing the
            added face, and persistedFaceId will not expire.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.ListFacesAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List all faces in a large face list, and retrieve face information
            (including userData and persistedFaceIds of registered faces of the face).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='start'>
            Starting face id to return (used to list a range of faces).
            </param>
            <param name='top'>
            Number of faces to return starting with the face id indicated by the
            'start' parameter.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargeFaceListOperationsExtensions.AddFaceFromStreamAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargeFaceListOperations,System.String,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add a face to a large face list. The input face is specified as an image
            with a targetFace rectangle. It returns a persistedFaceId representing the
            added face, and persistedFaceId will not expire.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largeFaceListId'>
            Id referencing a particular large face list.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperations">
            <summary>
            LargePersonGroupOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperations.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient)">
            <summary>
            Initializes a new instance of the LargePersonGroupOperations class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperations.Client">
            <summary>
            Gets a reference to the FaceClient
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperations.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create a new large person group with user-specified largePersonGroupId,
             name, an optional userData and recognitionModel.
             &lt;br /&gt; A large person group is the container of the uploaded person
             data, including face images and face recognition feature, and up to
             1,000,000 people.
             &lt;br /&gt; After creation, use [LargePersonGroup Person -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40)
             to add person into the group, and call [LargePersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4)
             to get this group ready for [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt; The person face, image, and userData will be stored on server
             until [LargePersonGroup Person -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2)
             or [LargePersonGroup -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f)
             is called.
             &lt;br /&gt;
             * Free-tier subscription quota: 1,000 large person groups.
             * S0-tier subscription quota: 1,000,000 large person groups.
             &lt;br /&gt;
             'recognitionModel' should be specified to associate with this large person
             group. The default value for 'recognitionModel' is 'recognition_01', if the
             latest model needed, please explicitly specify the model you need in this
             parameter. New faces that are added to an existing large person group will
             use the recognition model that's already associated with the collection.
             Existing face features in a large person group can't be updated to features
             extracted by another version of recognition model.
            
             </summary>
             <param name='largePersonGroupId'>
             Id referencing a particular large person group.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperations.DeleteWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing large person group. Persisted face features of all
            people in the large person group will also be deleted.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperations.GetWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Retrieve the information of a large person group, including its name,
             userData and recognitionModel. This API returns large person group
             information only, use [LargePersonGroup Person -
             List](/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1)
             instead to retrieve person information under the large person group.
            
             </summary>
             <param name='largePersonGroupId'>
             Id referencing a particular large person group.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperations.UpdateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update an existing large person group's display name and userData. The
            properties which does not appear in request body will not be updated.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperations.GetTrainingStatusWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve the training status of a large person group (completed or
            ongoing).
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperations.ListWithHttpMessagesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             List all existing large person groups’s largePersonGroupId, name, userData
             and recognitionModel.&lt;br /&gt;
             * Large person groups are stored in alphabetical order of
             largePersonGroupId.
             * "start" parameter (string, optional) is a user-provided
             largePersonGroupId value that returned entries have larger ids by string
             comparison. "start" set to empty to indicate return from the first item.
             * "top" parameter (int, optional) specifies the number of entries to
             return. A maximal of 1000 entries can be returned in one call. To fetch
             more, you can specify "start" with the last retuned entry’s Id of the
             current call.
             &lt;br /&gt;
             For example, total 5 large person groups: "group1", ..., "group5".
             &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
             &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
             &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4",
             "group5".
            
             </summary>
             <param name='start'>
             List large person groups from the least largePersonGroupId greater than the
             "start".
             </param>
             <param name='top'>
             The number of large person groups to list.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperations.TrainWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Queue a large person group training task, the training task may not be
            started immediately.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperationsExtensions">
            <summary>
            Extension methods for LargePersonGroupOperations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperationsExtensions.CreateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Create a new large person group with user-specified largePersonGroupId,
             name, an optional userData and recognitionModel.
             &lt;br /&gt; A large person group is the container of the uploaded person
             data, including face images and face recognition feature, and up to
             1,000,000 people.
             &lt;br /&gt; After creation, use [LargePersonGroup Person -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/599adcba3a7b9412a4d53f40)
             to add person into the group, and call [LargePersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/599ae2d16ac60f11b48b5aa4)
             to get this group ready for [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt; The person face, image, and userData will be stored on server
             until [LargePersonGroup Person -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/599ade5c6ac60f11b48b5aa2)
             or [LargePersonGroup -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/599adc216ac60f11b48b5a9f)
             is called.
             &lt;br /&gt;
             * Free-tier subscription quota: 1,000 large person groups.
             * S0-tier subscription quota: 1,000,000 large person groups.
             &lt;br /&gt;
             'recognitionModel' should be specified to associate with this large person
             group. The default value for 'recognitionModel' is 'recognition_01', if the
             latest model needed, please explicitly specify the model you need in this
             parameter. New faces that are added to an existing large person group will
             use the recognition model that's already associated with the collection.
             Existing face features in a large person group can't be updated to features
             extracted by another version of recognition model.
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='largePersonGroupId'>
             Id referencing a particular large person group.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperationsExtensions.DeleteAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete an existing large person group. Persisted face features of all
            people in the large person group will also be deleted.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperationsExtensions.GetAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             Retrieve the information of a large person group, including its name,
             userData and recognitionModel. This API returns large person group
             information only, use [LargePersonGroup Person -
             List](/docs/services/563879b61984550e40cbbe8d/operations/599adda06ac60f11b48b5aa1)
             instead to retrieve person information under the large person group.
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='largePersonGroupId'>
             Id referencing a particular large person group.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperationsExtensions.UpdateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update an existing large person group's display name and userData. The
            properties which does not appear in request body will not be updated.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperationsExtensions.GetTrainingStatusAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve the training status of a large person group (completed or
            ongoing).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperationsExtensions.ListAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             List all existing large person groups’s largePersonGroupId, name, userData
             and recognitionModel.&lt;br /&gt;
             * Large person groups are stored in alphabetical order of
             largePersonGroupId.
             * "start" parameter (string, optional) is a user-provided
             largePersonGroupId value that returned entries have larger ids by string
             comparison. "start" set to empty to indicate return from the first item.
             * "top" parameter (int, optional) specifies the number of entries to
             return. A maximal of 1000 entries can be returned in one call. To fetch
             more, you can specify "start" with the last retuned entry’s Id of the
             current call.
             &lt;br /&gt;
             For example, total 5 large person groups: "group1", ..., "group5".
             &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
             &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
             &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4",
             "group5".
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='start'>
             List large person groups from the least largePersonGroupId greater than the
             "start".
             </param>
             <param name='top'>
             The number of large person groups to list.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupOperationsExtensions.TrainAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Queue a large person group training task, the training task may not be
            started immediately.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson">
            <summary>
            LargePersonGroupPerson operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient)">
            <summary>
            Initializes a new instance of the LargePersonGroupPerson class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.Client">
            <summary>
            Gets a reference to the FaceClient
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Create a new person in a specified large person group.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.ListWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            List all persons in a large person group, and retrieve person information
            (including personId, name, userData and persistedFaceIds of registered
            faces of the person).
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='start'>
            Starting person id to return (used to list a range of persons).
            </param>
            <param name='top'>
            Number of persons to return starting with the person id indicated by the
            'start' parameter.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.DeleteWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing person from a large person group. All stored person
            data, and face features in the person entry will be deleted.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.GetWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve a person's information, including registered persisted faces, name
            and userData.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.UpdateWithHttpMessagesAsync(System.String,System.Guid,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update name or userData of a person.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.DeleteFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete a face from a person. Relative feature for the persisted face will
            also be deleted.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.GetFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a persisted face (specified by persistedFaceId,
            personId and its belonging largePersonGroupId).
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.UpdateFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update a person persisted face's userData field.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='userData'>
            User-provided data attached to the face. The size limit is 1KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.AddFaceFromUrlWithHttpMessagesAsync(System.String,System.Guid,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input face is
            specified as an image with a targetFace rectangle.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPerson.AddFaceFromStreamWithHttpMessagesAsync(System.String,System.Guid,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input face is
            specified as an image with a targetFace rectangle.
            </summary>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPersonExtensions">
            <summary>
            Extension methods for LargePersonGroupPerson.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPersonExtensions.CreateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Create a new person in a specified large person group.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPersonExtensions.ListAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List all persons in a large person group, and retrieve person information
            (including personId, name, userData and persistedFaceIds of registered
            faces of the person).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='start'>
            Starting person id to return (used to list a range of persons).
            </param>
            <param name='top'>
            Number of persons to return starting with the person id indicated by the
            'start' parameter.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPersonExtensions.DeleteAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete an existing person from a large person group. All stored person
            data, and face features in the person entry will be deleted.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPersonExtensions.GetAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve a person's information, including registered persisted faces, name
            and userData.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPersonExtensions.UpdateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson,System.String,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update name or userData of a person.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPersonExtensions.DeleteFaceAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson,System.String,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete a face from a person. Relative feature for the persisted face will
            also be deleted.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPersonExtensions.GetFaceAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson,System.String,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a persisted face (specified by persistedFaceId,
            personId and its belonging largePersonGroupId).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPersonExtensions.UpdateFaceAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson,System.String,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Update a person persisted face's userData field.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='userData'>
            User-provided data attached to the face. The size limit is 1KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPersonExtensions.AddFaceFromUrlAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson,System.String,System.Guid,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input face is
            specified as an image with a targetFace rectangle.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.LargePersonGroupPersonExtensions.AddFaceFromStreamAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ILargePersonGroupPerson,System.String,System.Guid,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input face is
            specified as an image with a targetFace rectangle.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='largePersonGroupId'>
            Id referencing a particular large person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Accessory">
            <summary>
            Accessory item and corresponding confidence level.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Accessory.#ctor">
            <summary>
            Initializes a new instance of the Accessory class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Accessory.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.Models.AccessoryType,System.Double)">
            <summary>
            Initializes a new instance of the Accessory class.
            </summary>
            <param name="type">Type of an accessory. Possible values include:
            'headWear', 'glasses', 'mask'</param>
            <param name="confidence">Confidence level of an accessory</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Accessory.Type">
            <summary>
            Gets or sets type of an accessory. Possible values include:
            'headWear', 'glasses', 'mask'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Accessory.Confidence">
            <summary>
            Gets or sets confidence level of an accessory
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.AccessoryType">
            <summary>
            Defines values for AccessoryType.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIError">
            <summary>
            Error information returned by the API
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIError.#ctor">
            <summary>
            Initializes a new instance of the APIError class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIError.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.Models.Error)">
            <summary>
            Initializes a new instance of the APIError class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIError.Error">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            <summary>
            Exception thrown for an invalid response with APIError information.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException.Request">
            <summary>
            Gets information about the associated HTTP request.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException.Response">
            <summary>
            Gets information about the associated HTTP response.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException.Body">
            <summary>
            Gets or sets the body object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException.#ctor">
            <summary>
            Initializes a new instance of the APIErrorException class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the APIErrorException class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the APIErrorException class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.ApplySnapshotRequest">
            <summary>
            Request body for applying snapshot operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.ApplySnapshotRequest.#ctor">
            <summary>
            Initializes a new instance of the ApplySnapshotRequest class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.ApplySnapshotRequest.#ctor(System.String,Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotApplyMode)">
            <summary>
            Initializes a new instance of the ApplySnapshotRequest class.
            </summary>
            <param name="objectId">User specified target object id to be
            created from the snapshot.</param>
            <param name="mode">Snapshot applying mode. Currently only CreateNew
            is supported, which means the apply operation will fail if target
            subscription already contains an object of same type and using the
            same objectId. Users can specify the "objectId" in request body to
            avoid such conflicts. Possible values include: 'CreateNew'</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.ApplySnapshotRequest.ObjectId">
            <summary>
            Gets or sets user specified target object id to be created from the
            snapshot.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.ApplySnapshotRequest.Mode">
            <summary>
            Gets or sets snapshot applying mode. Currently only CreateNew is
            supported, which means the apply operation will fail if target
            subscription already contains an object of same type and using the
            same objectId. Users can specify the "objectId" in request body to
            avoid such conflicts. Possible values include: 'CreateNew'
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.ApplySnapshotRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Blur">
            <summary>
            Properties describing any presence of blur within the image.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Blur.#ctor">
            <summary>
            Initializes a new instance of the Blur class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Blur.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.Models.BlurLevel,System.Double)">
            <summary>
            Initializes a new instance of the Blur class.
            </summary>
            <param name="blurLevel">An enum value indicating level of
            blurriness. Possible values include: 'Low', 'Medium',
            'High'</param>
            <param name="value">A number indicating level of blurriness ranging
            from 0 to 1.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Blur.BlurLevel">
            <summary>
            Gets or sets an enum value indicating level of blurriness. Possible
            values include: 'Low', 'Medium', 'High'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Blur.Value">
            <summary>
            Gets or sets a number indicating level of blurriness ranging from 0
            to 1.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.BlurLevel">
            <summary>
            Defines values for BlurLevel.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate">
            <summary>
            Coordinates within an image
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate.#ctor">
            <summary>
            Initializes a new instance of the Coordinate class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Coordinate class.
            </summary>
            <param name="x">The horizontal component, in pixels.</param>
            <param name="y">The vertical component, in pixels.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate.X">
            <summary>
            Gets or sets the horizontal component, in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate.Y">
            <summary>
            Gets or sets the vertical component, in pixels.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.DetectedFace">
            <summary>
            Detected Face object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.DetectedFace.#ctor">
            <summary>
            Initializes a new instance of the DetectedFace class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.DetectedFace.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceRectangle,System.Nullable{System.Guid},System.String,Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks,Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes)">
            <summary>
            Initializes a new instance of the DetectedFace class.
            </summary>
            <param name="recognitionModel">Possible values include:
            'recognition_01', 'recognition_02'</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.DetectedFace.FaceId">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.DetectedFace.RecognitionModel">
            <summary>
            Gets or sets possible values include: 'recognition_01',
            'recognition_02'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.DetectedFace.FaceRectangle">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.DetectedFace.FaceLandmarks">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.DetectedFace.FaceAttributes">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.DetectedFace.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion">
            <summary>
            Properties describing facial emotion in form of confidence ranging from
            0 to 1.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion.#ctor">
            <summary>
            Initializes a new instance of the Emotion class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Emotion class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion.Anger">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion.Contempt">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion.Disgust">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion.Fear">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion.Happiness">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion.Neutral">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion.Sadness">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion.Surprise">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Error">
            <summary>
            Error body.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Error.#ctor">
            <summary>
            Initializes a new instance of the Error class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Error.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Error class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Error.Code">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Error.Message">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Exposure">
            <summary>
            Properties describing exposure level of the image.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Exposure.#ctor">
            <summary>
            Initializes a new instance of the Exposure class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Exposure.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.Models.ExposureLevel,System.Double)">
            <summary>
            Initializes a new instance of the Exposure class.
            </summary>
            <param name="exposureLevel">An enum value indicating level of
            exposure. Possible values include: 'UnderExposure', 'GoodExposure',
            'OverExposure'</param>
            <param name="value">A number indicating level of exposure level
            ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is
            good exposure. [0.75, 1] is over exposure.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Exposure.ExposureLevel">
            <summary>
            Gets or sets an enum value indicating level of exposure. Possible
            values include: 'UnderExposure', 'GoodExposure', 'OverExposure'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Exposure.Value">
            <summary>
            Gets or sets a number indicating level of exposure level ranging
            from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good
            exposure. [0.75, 1] is over exposure.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.ExposureLevel">
            <summary>
            Defines values for ExposureLevel.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes">
            <summary>
            Face Attributes
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.#ctor">
            <summary>
            Initializes a new instance of the FaceAttributes class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.#ctor(System.Nullable{System.Double},System.Nullable{Microsoft.Azure.CognitiveServices.Vision.Face.Models.Gender},System.Nullable{System.Double},Microsoft.Azure.CognitiveServices.Vision.Face.Models.FacialHair,System.Nullable{Microsoft.Azure.CognitiveServices.Vision.Face.Models.GlassesType},Microsoft.Azure.CognitiveServices.Vision.Face.Models.HeadPose,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Emotion,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Hair,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Makeup,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Occlusion,System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Vision.Face.Models.Accessory},Microsoft.Azure.CognitiveServices.Vision.Face.Models.Blur,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Exposure,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Noise)">
            <summary>
            Initializes a new instance of the FaceAttributes class.
            </summary>
            <param name="age">Age in years</param>
            <param name="gender">Possible gender of the face. Possible values
            include: 'male', 'female', 'genderless'</param>
            <param name="smile">Smile intensity, a number between [0,1]
            </param>
            <param name="facialHair">Properties describing facial hair
            attributes.</param>
            <param name="glasses">Glasses type if any of the face. Possible
            values include: 'noGlasses', 'readingGlasses', 'sunglasses',
            'swimmingGoggles'</param>
            <param name="headPose">Properties indicating head pose of the
            face.</param>
            <param name="emotion">Properties describing facial emotion in form
            of confidence ranging from 0 to 1.</param>
            <param name="hair">Properties describing hair attributes.</param>
            <param name="makeup">Properties describing present makeups on a
            given face.</param>
            <param name="occlusion">Properties describing occlusions on a given
            face.</param>
            <param name="accessories">Properties describing any accessories on
            a given face.</param>
            <param name="blur">Properties describing any presence of blur
            within the image.</param>
            <param name="exposure">Properties describing exposure level of the
            image.</param>
            <param name="noise">Properties describing noise level of the
            image.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Age">
            <summary>
            Gets or sets age in years
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Gender">
            <summary>
            Gets or sets possible gender of the face. Possible values include:
            'male', 'female', 'genderless'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Smile">
            <summary>
            Gets or sets smile intensity, a number between [0,1]
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.FacialHair">
            <summary>
            Gets or sets properties describing facial hair attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Glasses">
            <summary>
            Gets or sets glasses type if any of the face. Possible values
            include: 'noGlasses', 'readingGlasses', 'sunglasses',
            'swimmingGoggles'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.HeadPose">
            <summary>
            Gets or sets properties indicating head pose of the face.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Emotion">
            <summary>
            Gets or sets properties describing facial emotion in form of
            confidence ranging from 0 to 1.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Hair">
            <summary>
            Gets or sets properties describing hair attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Makeup">
            <summary>
            Gets or sets properties describing present makeups on a given face.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Occlusion">
            <summary>
            Gets or sets properties describing occlusions on a given face.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Accessories">
            <summary>
            Gets or sets properties describing any accessories on a given face.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Blur">
            <summary>
            Gets or sets properties describing any presence of blur within the
            image.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Exposure">
            <summary>
            Gets or sets properties describing exposure level of the image.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributes.Noise">
            <summary>
            Gets or sets properties describing noise level of the image.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceAttributeType">
            <summary>
            Defines values for FaceAttributeType.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks">
            <summary>
            A collection of 27-point face landmarks pointing to the important
            positions of face components.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.#ctor">
            <summary>
            Initializes a new instance of the FaceLandmarks class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate,Microsoft.Azure.CognitiveServices.Vision.Face.Models.Coordinate)">
            <summary>
            Initializes a new instance of the FaceLandmarks class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.PupilLeft">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.PupilRight">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.NoseTip">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.MouthLeft">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.MouthRight">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyebrowLeftOuter">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyebrowLeftInner">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyeLeftOuter">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyeLeftTop">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyeLeftBottom">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyeLeftInner">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyebrowRightInner">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyebrowRightOuter">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyeRightInner">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyeRightTop">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyeRightBottom">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.EyeRightOuter">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.NoseRootLeft">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.NoseRootRight">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.NoseLeftAlarTop">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.NoseRightAlarTop">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.NoseLeftAlarOutTip">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.NoseRightAlarOutTip">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.UpperLipTop">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.UpperLipBottom">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.UnderLipTop">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.UnderLipBottom">
            <summary>
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceLandmarks.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceList">
            <summary>
            Face list object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceList.#ctor">
            <summary>
            Initializes a new instance of the FaceList class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceList.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersistedFace})">
            <summary>
            Initializes a new instance of the FaceList class.
            </summary>
            <param name="faceListId">FaceListId of the target face
            list.</param>
            <param name="name">User defined name, maximum length is
            128.</param>
            <param name="userData">User specified data. Length should not
            exceed 16KB.</param>
            <param name="recognitionModel">Possible values include:
            'recognition_01', 'recognition_02'</param>
            <param name="persistedFaces">Persisted faces within the face
            list.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceList.FaceListId">
            <summary>
            Gets or sets faceListId of the target face list.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceList.PersistedFaces">
            <summary>
            Gets or sets persisted faces within the face list.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceRectangle">
            <summary>
            A rectangle within which a face can be found
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceRectangle.#ctor">
            <summary>
            Initializes a new instance of the FaceRectangle class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the FaceRectangle class.
            </summary>
            <param name="width">The width of the rectangle, in pixels.</param>
            <param name="height">The height of the rectangle, in
            pixels.</param>
            <param name="left">The distance from the left edge if the image to
            the left edge of the rectangle, in pixels.</param>
            <param name="top">The distance from the top edge if the image to
            the top edge of the rectangle, in pixels.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceRectangle.Width">
            <summary>
            Gets or sets the width of the rectangle, in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceRectangle.Height">
            <summary>
            Gets or sets the height of the rectangle, in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceRectangle.Left">
            <summary>
            Gets or sets the distance from the left edge if the image to the
            left edge of the rectangle, in pixels.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceRectangle.Top">
            <summary>
            Gets or sets the distance from the top edge if the image to the top
            edge of the rectangle, in pixels.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FaceRectangle.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FacialHair">
            <summary>
            Properties describing facial hair attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FacialHair.#ctor">
            <summary>
            Initializes a new instance of the FacialHair class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FacialHair.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the FacialHair class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FacialHair.Moustache">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FacialHair.Beard">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FacialHair.Sideburns">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarMatchMode">
            <summary>
            Defines values for FindSimilarMatchMode.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarRequest">
            <summary>
            Request body for find similar operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarRequest.#ctor">
            <summary>
            Initializes a new instance of the FindSimilarRequest class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarRequest.#ctor(System.Guid,System.String,System.String,System.Collections.Generic.IList{System.Nullable{System.Guid}},System.Nullable{System.Int32},Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarMatchMode)">
            <summary>
            Initializes a new instance of the FindSimilarRequest class.
            </summary>
            <param name="faceId">FaceId of the query face. User needs to call
            Face - Detect first to get a valid faceId. Note that this faceId is
            not persisted and will expire 24 hours after the detection
            call</param>
            <param name="faceListId">An existing user-specified unique
            candidate face list, created in Face List - Create a Face List.
            Face list contains a set of persistedFaceIds which are persisted
            and will never expire. Parameter faceListId, largeFaceListId and
            faceIds should not be provided at the same time.</param>
            <param name="largeFaceListId">An existing user-specified unique
            candidate large face list, created in LargeFaceList - Create. Large
            face list contains a set of persistedFaceIds which are persisted
            and will never expire. Parameter faceListId, largeFaceListId and
            faceIds should not be provided at the same time.</param>
            <param name="faceIds">An array of candidate faceIds. All of them
            are created by Face - Detect and the faceIds will expire 24 hours
            after the detection call. The number of faceIds is limited to 1000.
            Parameter faceListId, largeFaceListId and faceIds should not be
            provided at the same time.</param>
            <param name="maxNumOfCandidatesReturned">The number of top similar
            faces returned. The valid range is [1, 1000].</param>
            <param name="mode">Similar face searching mode. It can be
            "matchPerson" or "matchFace". Possible values include:
            'matchPerson', 'matchFace'</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarRequest.FaceId">
            <summary>
            Gets or sets faceId of the query face. User needs to call Face -
            Detect first to get a valid faceId. Note that this faceId is not
            persisted and will expire 24 hours after the detection call
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarRequest.FaceListId">
            <summary>
            Gets or sets an existing user-specified unique candidate face list,
            created in Face List - Create a Face List. Face list contains a set
            of persistedFaceIds which are persisted and will never expire.
            Parameter faceListId, largeFaceListId and faceIds should not be
            provided at the same time.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarRequest.LargeFaceListId">
            <summary>
            Gets or sets an existing user-specified unique candidate large face
            list, created in LargeFaceList - Create. Large face list contains a
            set of persistedFaceIds which are persisted and will never expire.
            Parameter faceListId, largeFaceListId and faceIds should not be
            provided at the same time.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarRequest.FaceIds">
            <summary>
            Gets or sets an array of candidate faceIds. All of them are created
            by Face - Detect and the faceIds will expire 24 hours after the
            detection call. The number of faceIds is limited to 1000. Parameter
            faceListId, largeFaceListId and faceIds should not be provided at
            the same time.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarRequest.MaxNumOfCandidatesReturned">
            <summary>
            Gets or sets the number of top similar faces returned. The valid
            range is [1, 1000].
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarRequest.Mode">
            <summary>
            Gets or sets similar face searching mode. It can be "matchPerson"
            or "matchFace". Possible values include: 'matchPerson', 'matchFace'
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.FindSimilarRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Gender">
            <summary>
            Defines values for Gender.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GlassesType">
            <summary>
            Defines values for GlassesType.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GroupRequest">
            <summary>
            Request body for group request.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GroupRequest.#ctor">
            <summary>
            Initializes a new instance of the GroupRequest class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GroupRequest.#ctor(System.Collections.Generic.IList{System.Guid})">
            <summary>
            Initializes a new instance of the GroupRequest class.
            </summary>
            <param name="faceIds">Array of candidate faceId created by Face -
            Detect. The maximum is 1000 faces</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GroupRequest.FaceIds">
            <summary>
            Gets or sets array of candidate faceId created by Face - Detect.
            The maximum is 1000 faces
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GroupRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GroupResult">
            <summary>
            An array of face groups based on face similarity.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GroupResult.#ctor">
            <summary>
            Initializes a new instance of the GroupResult class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GroupResult.#ctor(System.Collections.Generic.IList{System.Collections.Generic.IList{System.Guid}},System.Collections.Generic.IList{System.Guid})">
            <summary>
            Initializes a new instance of the GroupResult class.
            </summary>
            <param name="groups">A partition of the original faces based on
            face similarity. Groups are ranked by number of faces</param>
            <param name="messyGroup">Face ids array of faces that cannot find
            any similar faces from original faces.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GroupResult.Groups">
            <summary>
            Gets or sets a partition of the original faces based on face
            similarity. Groups are ranked by number of faces
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GroupResult.MessyGroup">
            <summary>
            Gets or sets face ids array of faces that cannot find any similar
            faces from original faces.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.GroupResult.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Hair">
            <summary>
            Properties describing hair attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Hair.#ctor">
            <summary>
            Initializes a new instance of the Hair class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Hair.#ctor(System.Double,System.Boolean,System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Vision.Face.Models.HairColor})">
            <summary>
            Initializes a new instance of the Hair class.
            </summary>
            <param name="bald">A number describing confidence level of whether
            the person is bald.</param>
            <param name="invisible">A boolean value describing whether the hair
            is visible in the image.</param>
            <param name="hairColor">An array of candidate colors and confidence
            level in the presence of each.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Hair.Bald">
            <summary>
            Gets or sets a number describing confidence level of whether the
            person is bald.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Hair.Invisible">
            <summary>
            Gets or sets a boolean value describing whether the hair is visible
            in the image.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Hair.HairColor">
            <summary>
            Gets or sets an array of candidate colors and confidence level in
            the presence of each.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HairColor">
            <summary>
            Hair color and associated confidence
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HairColor.#ctor">
            <summary>
            Initializes a new instance of the HairColor class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HairColor.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.Models.HairColorType,System.Double)">
            <summary>
            Initializes a new instance of the HairColor class.
            </summary>
            <param name="color">Name of the hair color. Possible values
            include: 'unknown', 'white', 'gray', 'blond', 'brown', 'red',
            'black', 'other'</param>
            <param name="confidence">Confidence level of the color</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HairColor.Color">
            <summary>
            Gets or sets name of the hair color. Possible values include:
            'unknown', 'white', 'gray', 'blond', 'brown', 'red', 'black',
            'other'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HairColor.Confidence">
            <summary>
            Gets or sets confidence level of the color
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HairColorType">
            <summary>
            Defines values for HairColorType.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HeadPose">
            <summary>
            Properties indicating head pose of the face.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HeadPose.#ctor">
            <summary>
            Initializes a new instance of the HeadPose class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HeadPose.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the HeadPose class.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HeadPose.Roll">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HeadPose.Yaw">
            <summary>
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.HeadPose.Pitch">
            <summary>
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyCandidate">
            <summary>
            All possible faces that may qualify.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyCandidate.#ctor">
            <summary>
            Initializes a new instance of the IdentifyCandidate class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyCandidate.#ctor(System.Guid,System.Double)">
            <summary>
            Initializes a new instance of the IdentifyCandidate class.
            </summary>
            <param name="personId">Id of candidate</param>
            <param name="confidence">Confidence threshold of identification,
            used to judge whether one face belong to one person. The range of
            confidenceThreshold is [0, 1] (default specified by
            algorithm).</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyCandidate.PersonId">
            <summary>
            Gets or sets id of candidate
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyCandidate.Confidence">
            <summary>
            Gets or sets confidence threshold of identification, used to judge
            whether one face belong to one person. The range of
            confidenceThreshold is [0, 1] (default specified by algorithm).
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyCandidate.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyRequest">
            <summary>
            Request body for identify face operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyRequest.#ctor">
            <summary>
            Initializes a new instance of the IdentifyRequest class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyRequest.#ctor(System.Collections.Generic.IList{System.Guid},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Double})">
            <summary>
            Initializes a new instance of the IdentifyRequest class.
            </summary>
            <param name="faceIds">Array of query faces faceIds, created by the
            Face - Detect. Each of the faces are identified independently. The
            valid number of faceIds is between [1, 10].</param>
            <param name="personGroupId">PersonGroupId of the target person
            group, created by PersonGroup - Create. Parameter personGroupId and
            largePersonGroupId should not be provided at the same time.</param>
            <param name="largePersonGroupId">LargePersonGroupId of the target
            large person group, created by LargePersonGroup - Create. Parameter
            personGroupId and largePersonGroupId should not be provided at the
            same time.</param>
            <param name="maxNumOfCandidatesReturned">The range of
            maxNumOfCandidatesReturned is between 1 and 5 (default is
            1).</param>
            <param name="confidenceThreshold">Confidence threshold of
            identification, used to judge whether one face belong to one
            person. The range of confidenceThreshold is [0, 1] (default
            specified by algorithm).</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyRequest.FaceIds">
            <summary>
            Gets or sets array of query faces faceIds, created by the Face -
            Detect. Each of the faces are identified independently. The valid
            number of faceIds is between [1, 10].
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyRequest.PersonGroupId">
            <summary>
            Gets or sets personGroupId of the target person group, created by
            PersonGroup - Create. Parameter personGroupId and
            largePersonGroupId should not be provided at the same time.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyRequest.LargePersonGroupId">
            <summary>
            Gets or sets largePersonGroupId of the target large person group,
            created by LargePersonGroup - Create. Parameter personGroupId and
            largePersonGroupId should not be provided at the same time.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyRequest.MaxNumOfCandidatesReturned">
            <summary>
            Gets or sets the range of maxNumOfCandidatesReturned is between 1
            and 5 (default is 1).
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyRequest.ConfidenceThreshold">
            <summary>
            Gets or sets confidence threshold of identification, used to judge
            whether one face belong to one person. The range of
            confidenceThreshold is [0, 1] (default specified by algorithm).
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyResult">
            <summary>
            Response body for identify face operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyResult.#ctor">
            <summary>
            Initializes a new instance of the IdentifyResult class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyResult.#ctor(System.Guid,System.Collections.Generic.IList{Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyCandidate})">
            <summary>
            Initializes a new instance of the IdentifyResult class.
            </summary>
            <param name="faceId">FaceId of the query face</param>
            <param name="candidates">Identified person candidates for that face
            (ranked by confidence). Array size should be no larger than input
            maxNumOfCandidatesReturned. If no person is identified, will return
            an empty array.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyResult.FaceId">
            <summary>
            Gets or sets faceId of the query face
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyResult.Candidates">
            <summary>
            Gets or sets identified person candidates for that face (ranked by
            confidence). Array size should be no larger than input
            maxNumOfCandidatesReturned. If no person is identified, will return
            an empty array.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.IdentifyResult.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.ImageUrl.#ctor">
            <summary>
            Initializes a new instance of the ImageUrl class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.ImageUrl.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ImageUrl class.
            </summary>
            <param name="url">Publicly reachable URL of an image</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.ImageUrl.Url">
            <summary>
            Gets or sets publicly reachable URL of an image
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.ImageUrl.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.LargeFaceList">
            <summary>
            Large face list object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.LargeFaceList.#ctor">
            <summary>
            Initializes a new instance of the LargeFaceList class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.LargeFaceList.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the LargeFaceList class.
            </summary>
            <param name="largeFaceListId">LargeFaceListId of the target large
            face list.</param>
            <param name="name">User defined name, maximum length is
            128.</param>
            <param name="userData">User specified data. Length should not
            exceed 16KB.</param>
            <param name="recognitionModel">Possible values include:
            'recognition_01', 'recognition_02'</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.LargeFaceList.LargeFaceListId">
            <summary>
            Gets or sets largeFaceListId of the target large face list.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.LargeFaceList.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.LargePersonGroup">
            <summary>
            Large person group object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.LargePersonGroup.#ctor">
            <summary>
            Initializes a new instance of the LargePersonGroup class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.LargePersonGroup.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the LargePersonGroup class.
            </summary>
            <param name="largePersonGroupId">LargePersonGroupId of the target
            large person groups</param>
            <param name="name">User defined name, maximum length is
            128.</param>
            <param name="userData">User specified data. Length should not
            exceed 16KB.</param>
            <param name="recognitionModel">Possible values include:
            'recognition_01', 'recognition_02'</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.LargePersonGroup.LargePersonGroupId">
            <summary>
            Gets or sets largePersonGroupId of the target large person groups
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.LargePersonGroup.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Makeup">
            <summary>
            Properties describing present makeups on a given face.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Makeup.#ctor">
            <summary>
            Initializes a new instance of the Makeup class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Makeup.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Makeup class.
            </summary>
            <param name="eyeMakeup">A boolean value describing whether eye
            makeup is present on a face.</param>
            <param name="lipMakeup">A boolean value describing whether lip
            makeup is present on a face.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Makeup.EyeMakeup">
            <summary>
            Gets or sets a boolean value describing whether eye makeup is
            present on a face.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Makeup.LipMakeup">
            <summary>
            Gets or sets a boolean value describing whether lip makeup is
            present on a face.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.MetaDataContract">
            <summary>
            A combination of user defined name and user specified data and
            recognition model name for largePersonGroup/personGroup, and
            largeFaceList/faceList.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.MetaDataContract.#ctor">
            <summary>
            Initializes a new instance of the MetaDataContract class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.MetaDataContract.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the MetaDataContract class.
            </summary>
            <param name="name">User defined name, maximum length is
            128.</param>
            <param name="userData">User specified data. Length should not
            exceed 16KB.</param>
            <param name="recognitionModel">Possible values include:
            'recognition_01', 'recognition_02'</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.MetaDataContract.RecognitionModel">
            <summary>
            Gets or sets possible values include: 'recognition_01',
            'recognition_02'
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.MetaDataContract.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.NameAndUserDataContract">
            <summary>
            A combination of user defined name and user specified data for the
            person, largePersonGroup/personGroup, and largeFaceList/faceList.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.NameAndUserDataContract.#ctor">
            <summary>
            Initializes a new instance of the NameAndUserDataContract class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.NameAndUserDataContract.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the NameAndUserDataContract class.
            </summary>
            <param name="name">User defined name, maximum length is
            128.</param>
            <param name="userData">User specified data. Length should not
            exceed 16KB.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.NameAndUserDataContract.Name">
            <summary>
            Gets or sets user defined name, maximum length is 128.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.NameAndUserDataContract.UserData">
            <summary>
            Gets or sets user specified data. Length should not exceed 16KB.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.NameAndUserDataContract.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Noise">
            <summary>
            Properties describing noise level of the image.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Noise.#ctor">
            <summary>
            Initializes a new instance of the Noise class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Noise.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.Models.NoiseLevel,System.Double)">
            <summary>
            Initializes a new instance of the Noise class.
            </summary>
            <param name="noiseLevel">An enum value indicating level of noise.
            Possible values include: 'Low', 'Medium', 'High'</param>
            <param name="value">A number indicating level of noise level
            ranging from 0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is
            good exposure. [0.75, 1] is over exposure. [0, 0.3) is low noise
            level. [0.3, 0.7) is medium noise level. [0.7, 1] is high noise
            level.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Noise.NoiseLevel">
            <summary>
            Gets or sets an enum value indicating level of noise. Possible
            values include: 'Low', 'Medium', 'High'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Noise.Value">
            <summary>
            Gets or sets a number indicating level of noise level ranging from
            0 to 1. [0, 0.25) is under exposure. [0.25, 0.75) is good exposure.
            [0.75, 1] is over exposure. [0, 0.3) is low noise level. [0.3, 0.7)
            is medium noise level. [0.7, 1] is high noise level.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.NoiseLevel">
            <summary>
            Defines values for NoiseLevel.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Occlusion">
            <summary>
            Properties describing occlusions on a given face.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Occlusion.#ctor">
            <summary>
            Initializes a new instance of the Occlusion class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Occlusion.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the Occlusion class.
            </summary>
            <param name="foreheadOccluded">A boolean value indicating whether
            forehead is occluded.</param>
            <param name="eyeOccluded">A boolean value indicating whether eyes
            are occluded.</param>
            <param name="mouthOccluded">A boolean value indicating whether the
            mouth is occluded.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Occlusion.ForeheadOccluded">
            <summary>
            Gets or sets a boolean value indicating whether forehead is
            occluded.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Occlusion.EyeOccluded">
            <summary>
            Gets or sets a boolean value indicating whether eyes are occluded.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Occlusion.MouthOccluded">
            <summary>
            Gets or sets a boolean value indicating whether the mouth is
            occluded.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.OperationStatus">
            <summary>
            Operation status object. Operation refers to the asynchronous backend
            task including taking a snapshot and applying a snapshot.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.OperationStatus.#ctor">
            <summary>
            Initializes a new instance of the OperationStatus class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.OperationStatus.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.Models.OperationStatusType,System.DateTime,System.Nullable{System.DateTime},System.String,System.String)">
            <summary>
            Initializes a new instance of the OperationStatus class.
            </summary>
            <param name="status">Operation status: notstarted, running,
            succeeded, failed. If the operation is requested and waiting to
            perform, the status is notstarted. If the operation is ongoing in
            backend, the status is running. Status succeeded means the
            operation is completed successfully, specifically for snapshot
            taking operation, it illustrates the snapshot is well taken and
            ready to apply, and for snapshot applying operation, it presents
            the target object has finished creating by the snapshot and ready
            to be used. Status failed is often caused by editing the source
            object while taking the snapshot or editing the target object while
            applying the snapshot before completion, see the field "message" to
            check the failure reason. Possible values include: 'notstarted',
            'running', 'succeeded', 'failed'</param>
            <param name="createdTime">A combined UTC date and time string that
            describes the time when the operation (take or apply a snapshot) is
            requested. E.g. 2018-12-25T11:41:02.2331413Z.</param>
            <param name="lastActionTime">A combined UTC date and time string
            that describes the last time the operation (take or apply a
            snapshot) is actively migrating data. The lastActionTime will keep
            increasing until the operation finishes. E.g.
            2018-12-25T11:51:27.8705696Z.</param>
            <param name="resourceLocation">When the operation succeeds
            successfully, for snapshot taking operation the snapshot id will be
            included in this field, and for snapshot applying operation, the
            path to get the target object will be returned in this
            field.</param>
            <param name="message">Show failure message when operation fails
            (omitted when operation succeeds).</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.OperationStatus.Status">
            <summary>
            Gets or sets operation status: notstarted, running, succeeded,
            failed. If the operation is requested and waiting to perform, the
            status is notstarted. If the operation is ongoing in backend, the
            status is running. Status succeeded means the operation is
            completed successfully, specifically for snapshot taking operation,
            it illustrates the snapshot is well taken and ready to apply, and
            for snapshot applying operation, it presents the target object has
            finished creating by the snapshot and ready to be used. Status
            failed is often caused by editing the source object while taking
            the snapshot or editing the target object while applying the
            snapshot before completion, see the field "message" to check the
            failure reason. Possible values include: 'notstarted', 'running',
            'succeeded', 'failed'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.OperationStatus.CreatedTime">
            <summary>
            Gets or sets a combined UTC date and time string that describes the
            time when the operation (take or apply a snapshot) is requested.
            E.g. 2018-12-25T11:41:02.2331413Z.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.OperationStatus.LastActionTime">
            <summary>
            Gets or sets a combined UTC date and time string that describes the
            last time the operation (take or apply a snapshot) is actively
            migrating data. The lastActionTime will keep increasing until the
            operation finishes. E.g. 2018-12-25T11:51:27.8705696Z.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.OperationStatus.ResourceLocation">
            <summary>
            Gets or sets when the operation succeeds successfully, for snapshot
            taking operation the snapshot id will be included in this field,
            and for snapshot applying operation, the path to get the target
            object will be returned in this field.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.OperationStatus.Message">
            <summary>
            Gets or sets show failure message when operation fails (omitted
            when operation succeeds).
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.OperationStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.OperationStatusType">
            <summary>
            Defines values for OperationStatusType.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersistedFace">
            <summary>
            PersonFace object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersistedFace.#ctor">
            <summary>
            Initializes a new instance of the PersistedFace class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersistedFace.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the PersistedFace class.
            </summary>
            <param name="persistedFaceId">The persistedFaceId of the target
            face, which is persisted and will not expire. Different from faceId
            created by Face - Detect and will expire in 24 hours after the
            detection call.</param>
            <param name="userData">User-provided data attached to the face. The
            size limit is 1KB.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersistedFace.PersistedFaceId">
            <summary>
            Gets or sets the persistedFaceId of the target face, which is
            persisted and will not expire. Different from faceId created by
            Face - Detect and will expire in 24 hours after the detection call.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersistedFace.UserData">
            <summary>
            Gets or sets user-provided data attached to the face. The size
            limit is 1KB.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersistedFace.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Person">
            <summary>
            Person object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Person.#ctor">
            <summary>
            Initializes a new instance of the Person class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Person.#ctor(System.Guid,System.String,System.String,System.Collections.Generic.IList{System.Guid})">
            <summary>
            Initializes a new instance of the Person class.
            </summary>
            <param name="personId">PersonId of the target face list.</param>
            <param name="name">User defined name, maximum length is
            128.</param>
            <param name="userData">User specified data. Length should not
            exceed 16KB.</param>
            <param name="persistedFaceIds">PersistedFaceIds of registered faces
            in the person. These persistedFaceIds are returned from Person -
            Add a Person Face, and will not expire.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Person.PersonId">
            <summary>
            Gets or sets personId of the target face list.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Person.PersistedFaceIds">
            <summary>
            Gets or sets persistedFaceIds of registered faces in the person.
            These persistedFaceIds are returned from Person - Add a Person
            Face, and will not expire.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Person.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersonGroup">
            <summary>
            Person group object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersonGroup.#ctor">
            <summary>
            Initializes a new instance of the PersonGroup class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersonGroup.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PersonGroup class.
            </summary>
            <param name="personGroupId">PersonGroupId of the target person
            group.</param>
            <param name="name">User defined name, maximum length is
            128.</param>
            <param name="userData">User specified data. Length should not
            exceed 16KB.</param>
            <param name="recognitionModel">Possible values include:
            'recognition_01', 'recognition_02'</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersonGroup.PersonGroupId">
            <summary>
            Gets or sets personGroupId of the target person group.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.PersonGroup.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.RecognitionModel">
            <summary>
            Defines values for RecognitionModel.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SimilarFace">
            <summary>
            Response body for find similar face operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SimilarFace.#ctor">
            <summary>
            Initializes a new instance of the SimilarFace class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SimilarFace.#ctor(System.Double,System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the SimilarFace class.
            </summary>
            <param name="confidence">Similarity confidence of the candidate
            face. The higher confidence, the more similar. Range between
            [0,1].</param>
            <param name="faceId">FaceId of candidate face when find by faceIds.
            faceId is created by Face - Detect and will expire 24 hours after
            the detection call</param>
            <param name="persistedFaceId">PersistedFaceId of candidate face
            when find by faceListId. persistedFaceId in face list is persisted
            and will not expire. As showed in below response</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SimilarFace.FaceId">
            <summary>
            Gets or sets faceId of candidate face when find by faceIds. faceId
            is created by Face - Detect and will expire 24 hours after the
            detection call
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SimilarFace.PersistedFaceId">
            <summary>
            Gets or sets persistedFaceId of candidate face when find by
            faceListId. persistedFaceId in face list is persisted and will not
            expire. As showed in below response
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SimilarFace.Confidence">
            <summary>
            Gets or sets similarity confidence of the candidate face. The
            higher confidence, the more similar. Range between [0,1].
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SimilarFace.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Snapshot">
            <summary>
            Snapshot object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Snapshot.#ctor">
            <summary>
            Initializes a new instance of the Snapshot class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Snapshot.#ctor(System.Guid,System.String,Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotObjectType,System.Collections.Generic.IList{System.Guid},System.DateTime,System.DateTime,System.String)">
            <summary>
            Initializes a new instance of the Snapshot class.
            </summary>
            <param name="id">Snapshot id.</param>
            <param name="account">Azure Cognitive Service Face account id of
            the subscriber who created the snapshot by Snapshot - Take.</param>
            <param name="type">Type of the source object in the snapshot,
            specified by the subscriber who created the snapshot when calling
            Snapshot - Take. Currently FaceList, PersonGroup, LargeFaceList and
            LargePersonGroup are supported. Possible values include:
            'FaceList', 'LargeFaceList', 'LargePersonGroup',
            'PersonGroup'</param>
            <param name="applyScope">Array of the target Face subscription ids
            for the snapshot, specified by the user who created the snapshot
            when calling Snapshot - Take. For each snapshot, only subscriptions
            included in the applyScope of Snapshot - Take can apply it.</param>
            <param name="createdTime">A combined UTC date and time string that
            describes the created time of the snapshot. E.g.
            2018-12-25T11:41:02.2331413Z.</param>
            <param name="lastUpdateTime">A combined UTC date and time string
            that describes the last time when the snapshot was created or
            updated by Snapshot - Update. E.g.
            2018-12-25T11:51:27.8705696Z.</param>
            <param name="userData">User specified data about the snapshot for
            any purpose. Length should not exceed 16KB.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Snapshot.Id">
            <summary>
            Gets or sets snapshot id.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Snapshot.Account">
            <summary>
            Gets or sets azure Cognitive Service Face account id of the
            subscriber who created the snapshot by Snapshot - Take.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Snapshot.Type">
            <summary>
            Gets or sets type of the source object in the snapshot, specified
            by the subscriber who created the snapshot when calling Snapshot -
            Take. Currently FaceList, PersonGroup, LargeFaceList and
            LargePersonGroup are supported. Possible values include:
            'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Snapshot.ApplyScope">
            <summary>
            Gets or sets array of the target Face subscription ids for the
            snapshot, specified by the user who created the snapshot when
            calling Snapshot - Take. For each snapshot, only subscriptions
            included in the applyScope of Snapshot - Take can apply it.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Snapshot.UserData">
            <summary>
            Gets or sets user specified data about the snapshot for any
            purpose. Length should not exceed 16KB.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Snapshot.CreatedTime">
            <summary>
            Gets or sets a combined UTC date and time string that describes the
            created time of the snapshot. E.g. 2018-12-25T11:41:02.2331413Z.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Snapshot.LastUpdateTime">
            <summary>
            Gets or sets a combined UTC date and time string that describes the
            last time when the snapshot was created or updated by Snapshot -
            Update. E.g. 2018-12-25T11:51:27.8705696Z.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.Snapshot.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotApplyHeaders">
            <summary>
            Defines headers for Apply operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotApplyHeaders.#ctor">
            <summary>
            Initializes a new instance of the SnapshotApplyHeaders class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotApplyHeaders.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SnapshotApplyHeaders class.
            </summary>
            <param name="operationLocation">Operation location with an
            operation id used to track the progress of applying the snapshot by
            OperationStatus - Get.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotApplyHeaders.OperationLocation">
            <summary>
            Gets or sets operation location with an operation id used to track
            the progress of applying the snapshot by OperationStatus - Get.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotApplyMode">
            <summary>
            Defines values for SnapshotApplyMode.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotObjectType">
            <summary>
            Defines values for SnapshotObjectType.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotTakeHeaders">
            <summary>
            Defines headers for Take operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotTakeHeaders.#ctor">
            <summary>
            Initializes a new instance of the SnapshotTakeHeaders class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotTakeHeaders.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SnapshotTakeHeaders class.
            </summary>
            <param name="operationLocation">Operation location with an
            operation id used to track the progress of taking snapshot. The
            returned id is the operation id, rather than snapshot id. Snapshot
            id can be obtained only when the operation status becomes
            "succeeded" in OperationStatus - Get.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotTakeHeaders.OperationLocation">
            <summary>
            Gets or sets operation location with an operation id used to track
            the progress of taking snapshot. The returned id is the operation
            id, rather than snapshot id. Snapshot id can be obtained only when
            the operation status becomes "succeeded" in OperationStatus - Get.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TakeSnapshotRequest">
            <summary>
            Request body for taking snapshot operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TakeSnapshotRequest.#ctor">
            <summary>
            Initializes a new instance of the TakeSnapshotRequest class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TakeSnapshotRequest.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotObjectType,System.String,System.Collections.Generic.IList{System.Guid},System.String)">
            <summary>
            Initializes a new instance of the TakeSnapshotRequest class.
            </summary>
            <param name="type">User specified type for the source object to
            take snapshot from. Currently FaceList, PersonGroup, LargeFaceList
            and LargePersonGroup are supported. Possible values include:
            'FaceList', 'LargeFaceList', 'LargePersonGroup',
            'PersonGroup'</param>
            <param name="objectId">User specified source object id to take
            snapshot from.</param>
            <param name="applyScope">User specified array of target Face
            subscription ids for the snapshot. For each snapshot, only
            subscriptions included in the applyScope of Snapshot - Take can
            apply it.</param>
            <param name="userData">User specified data about the snapshot for
            any purpose. Length should not exceed 16KB.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TakeSnapshotRequest.Type">
            <summary>
            Gets or sets user specified type for the source object to take
            snapshot from. Currently FaceList, PersonGroup, LargeFaceList and
            LargePersonGroup are supported. Possible values include:
            'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TakeSnapshotRequest.ObjectId">
            <summary>
            Gets or sets user specified source object id to take snapshot from.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TakeSnapshotRequest.ApplyScope">
            <summary>
            Gets or sets user specified array of target Face subscription ids
            for the snapshot. For each snapshot, only subscriptions included in
            the applyScope of Snapshot - Take can apply it.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TakeSnapshotRequest.UserData">
            <summary>
            Gets or sets user specified data about the snapshot for any
            purpose. Length should not exceed 16KB.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TakeSnapshotRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TrainingStatus">
            <summary>
            Training status object.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TrainingStatus.#ctor">
            <summary>
            Initializes a new instance of the TrainingStatus class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TrainingStatus.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.Models.TrainingStatusType,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Initializes a new instance of the TrainingStatus class.
            </summary>
            <param name="status">Training status: notstarted, running,
            succeeded, failed. If the training process is waiting to perform,
            the status is notstarted. If the training is ongoing, the status is
            running. Status succeed means this person group or large person
            group is ready for Face - Identify, or this large face list is
            ready for Face - Find Similar. Status failed is often caused by no
            person or no persisted face exist in the person group or large
            person group, or no persisted face exist in the large face list.
            Possible values include: 'nonstarted', 'running', 'succeeded',
            'failed'</param>
            <param name="created">A combined UTC date and time string that
            describes the created time of the person group, large person group
            or large face list.</param>
            <param name="lastAction">A combined UTC date and time string that
            describes the last modify time of the person group, large person
            group or large face list, could be null value when the group is not
            successfully trained.</param>
            <param name="lastSuccessfulTraining">A combined UTC date and time
            string that describes the last successful training time of the
            person group, large person group or large face list.</param>
            <param name="message">Show failure message when training failed
            (omitted when training succeed).</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TrainingStatus.Status">
            <summary>
            Gets or sets training status: notstarted, running, succeeded,
            failed. If the training process is waiting to perform, the status
            is notstarted. If the training is ongoing, the status is running.
            Status succeed means this person group or large person group is
            ready for Face - Identify, or this large face list is ready for
            Face - Find Similar. Status failed is often caused by no person or
            no persisted face exist in the person group or large person group,
            or no persisted face exist in the large face list. Possible values
            include: 'nonstarted', 'running', 'succeeded', 'failed'
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TrainingStatus.Created">
            <summary>
            Gets or sets a combined UTC date and time string that describes the
            created time of the person group, large person group or large face
            list.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TrainingStatus.LastAction">
            <summary>
            Gets or sets a combined UTC date and time string that describes the
            last modify time of the person group, large person group or large
            face list, could be null value when the group is not successfully
            trained.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TrainingStatus.LastSuccessfulTraining">
            <summary>
            Gets or sets a combined UTC date and time string that describes the
            last successful training time of the person group, large person
            group or large face list.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TrainingStatus.Message">
            <summary>
            Gets or sets show failure message when training failed (omitted
            when training succeed).
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TrainingStatus.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.TrainingStatusType">
            <summary>
            Defines values for TrainingStatusType.
            </summary>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.UpdateFaceRequest">
            <summary>
            Request to update face data.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.UpdateFaceRequest.#ctor">
            <summary>
            Initializes a new instance of the UpdateFaceRequest class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.UpdateFaceRequest.#ctor(System.String)">
            <summary>
            Initializes a new instance of the UpdateFaceRequest class.
            </summary>
            <param name="userData">User-provided data attached to the face. The
            size limit is 1KB.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.UpdateFaceRequest.UserData">
            <summary>
            Gets or sets user-provided data attached to the face. The size
            limit is 1KB.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.UpdateFaceRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.UpdateSnapshotRequest">
            <summary>
            Request body for updating a snapshot, with a combination of user
            defined apply scope and user specified data.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.UpdateSnapshotRequest.#ctor">
            <summary>
            Initializes a new instance of the UpdateSnapshotRequest class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.UpdateSnapshotRequest.#ctor(System.Collections.Generic.IList{System.Guid},System.String)">
            <summary>
            Initializes a new instance of the UpdateSnapshotRequest class.
            </summary>
            <param name="applyScope">Array of the target Face subscription ids
            for the snapshot, specified by the user who created the snapshot
            when calling Snapshot - Take. For each snapshot, only subscriptions
            included in the applyScope of Snapshot - Take can apply it.</param>
            <param name="userData">User specified data about the snapshot for
            any purpose. Length should not exceed 16KB.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.UpdateSnapshotRequest.ApplyScope">
            <summary>
            Gets or sets array of the target Face subscription ids for the
            snapshot, specified by the user who created the snapshot when
            calling Snapshot - Take. For each snapshot, only subscriptions
            included in the applyScope of Snapshot - Take can apply it.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.UpdateSnapshotRequest.UserData">
            <summary>
            Gets or sets user specified data about the snapshot for any
            purpose. Length should not exceed 16KB.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.UpdateSnapshotRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToFaceRequest">
            <summary>
            Request body for face to face verification.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToFaceRequest.#ctor">
            <summary>
            Initializes a new instance of the VerifyFaceToFaceRequest class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToFaceRequest.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the VerifyFaceToFaceRequest class.
            </summary>
            <param name="faceId1">FaceId of the first face, comes from Face -
            Detect</param>
            <param name="faceId2">FaceId of the second face, comes from Face -
            Detect</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToFaceRequest.FaceId1">
            <summary>
            Gets or sets faceId of the first face, comes from Face - Detect
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToFaceRequest.FaceId2">
            <summary>
            Gets or sets faceId of the second face, comes from Face - Detect
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToFaceRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToPersonRequest">
            <summary>
            Request body for face to person verification.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToPersonRequest.#ctor">
            <summary>
            Initializes a new instance of the VerifyFaceToPersonRequest class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToPersonRequest.#ctor(System.Guid,System.Guid,System.String,System.String)">
            <summary>
            Initializes a new instance of the VerifyFaceToPersonRequest class.
            </summary>
            <param name="faceId">FaceId of the face, comes from Face -
            Detect</param>
            <param name="personId">Specify a certain person in a person group
            or a large person group. personId is created in PersonGroup Person
            - Create or LargePersonGroup Person - Create.</param>
            <param name="personGroupId">Using existing personGroupId and
            personId for fast loading a specified person. personGroupId is
            created in PersonGroup - Create. Parameter personGroupId and
            largePersonGroupId should not be provided at the same time.</param>
            <param name="largePersonGroupId">Using existing largePersonGroupId
            and personId for fast loading a specified person.
            largePersonGroupId is created in LargePersonGroup - Create.
            Parameter personGroupId and largePersonGroupId should not be
            provided at the same time.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToPersonRequest.FaceId">
            <summary>
            Gets or sets faceId of the face, comes from Face - Detect
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToPersonRequest.PersonGroupId">
            <summary>
            Gets or sets using existing personGroupId and personId for fast
            loading a specified person. personGroupId is created in PersonGroup
            - Create. Parameter personGroupId and largePersonGroupId should not
            be provided at the same time.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToPersonRequest.LargePersonGroupId">
            <summary>
            Gets or sets using existing largePersonGroupId and personId for
            fast loading a specified person. largePersonGroupId is created in
            LargePersonGroup - Create. Parameter personGroupId and
            largePersonGroupId should not be provided at the same time.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToPersonRequest.PersonId">
            <summary>
            Gets or sets specify a certain person in a person group or a large
            person group. personId is created in PersonGroup Person - Create or
            LargePersonGroup Person - Create.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyFaceToPersonRequest.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyResult">
            <summary>
            Result of the verify operation.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyResult.#ctor">
            <summary>
            Initializes a new instance of the VerifyResult class.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyResult.#ctor(System.Boolean,System.Double)">
            <summary>
            Initializes a new instance of the VerifyResult class.
            </summary>
            <param name="isIdentical">True if the two faces belong to the same
            person or the face belongs to the person, otherwise false.</param>
            <param name="confidence">A number indicates the similarity
            confidence of whether two faces belong to the same person, or
            whether the face belongs to the person. By default, isIdentical is
            set to True if similarity confidence is greater than or equal to
            0.5. This is useful for advanced users to override "isIdentical"
            and fine-tune the result on their own data.</param>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyResult.IsIdentical">
            <summary>
            Gets or sets true if the two faces belong to the same person or the
            face belongs to the person, otherwise false.
            </summary>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyResult.Confidence">
            <summary>
            Gets or sets a number indicates the similarity confidence of
            whether two faces belong to the same person, or whether the face
            belongs to the person. By default, isIdentical is set to True if
            similarity confidence is greater than or equal to 0.5. This is
            useful for advanced users to override "isIdentical" and fine-tune
            the result on their own data.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.Models.VerifyResult.Validate">
            <summary>
            Validate the object.
            </summary>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown if validation fails
            </exception>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperations">
            <summary>
            PersonGroupOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperations.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient)">
            <summary>
            Initializes a new instance of the PersonGroupOperations class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperations.Client">
            <summary>
            Gets a reference to the FaceClient
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperations.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             Create a new person group with specified personGroupId, name, user-provided
             userData and recognitionModel.
             &lt;br /&gt; A person group is the container of the uploaded person data,
             including face images and face recognition features.
             &lt;br /&gt; After creation, use [PersonGroup Person -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c)
             to add persons into the group, and then call [PersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)
             to get this group ready for [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt; The person's face, image, and userData will be stored on
             server until [PersonGroup Person -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)
             or [PersonGroup -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)
             is called.
             &lt;br /&gt;
             * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000
             persons.
             * S0-tier subscription quota: 1,000,000 person groups. Each holds up to
             10,000 persons.
             * to handle larger scale face identification problem, please consider using
             [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
             &lt;br /&gt;
             'recognitionModel' should be specified to associate with this person group.
             The default value for 'recognitionModel' is 'recognition_01', if the latest
             model needed, please explicitly specify the model you need in this
             parameter. New faces that are added to an existing person group will use
             the recognition model that's already associated with the collection.
             Existing face features in a person group can't be updated to features
             extracted by another version of recognition model.
            
             </summary>
             <param name='personGroupId'>
             Id referencing a particular person group.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperations.DeleteWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing person group. Persisted face features of all people in
            the person group will also be deleted.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperations.GetWithHttpMessagesAsync(System.String,System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve person group name, userData and recognitionModel. To get person
            information under this personGroup, use [PersonGroup Person -
            List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='returnRecognitionModel'>
            A value indicating whether the operation should return 'recognitionModel'
            in response.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperations.UpdateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update an existing person group's display name and userData. The properties
            which does not appear in request body will not be updated.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperations.GetTrainingStatusWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve the training status of a person group (completed or ongoing).
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperations.ListWithHttpMessagesAsync(System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
             <summary>
             List person groups’s personGroupId, name, userData and
             recognitionModel.&lt;br /&gt;
             * Person groups are stored in alphabetical order of personGroupId.
             * "start" parameter (string, optional) is a user-provided personGroupId
             value that returned entries have larger ids by string comparison. "start"
             set to empty to indicate return from the first item.
             * "top" parameter (int, optional) specifies the number of entries to
             return. A maximal of 1000 entries can be returned in one call. To fetch
             more, you can specify "start" with the last retuned entry’s Id of the
             current call.
             &lt;br /&gt;
             For example, total 5 person groups: "group1", ..., "group5".
             &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
             &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
             &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4",
             "group5".
            
             </summary>
             <param name='start'>
             List person groups from the least personGroupId greater than the "start".
             </param>
             <param name='top'>
             The number of person groups to list.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='customHeaders'>
             Headers that will be added to request.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
             <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
             Thrown when the operation returned an invalid status code
             </exception>
             <exception cref="T:Microsoft.Rest.SerializationException">
             Thrown when unable to deserialize the response
             </exception>
             <exception cref="T:Microsoft.Rest.ValidationException">
             Thrown when a required parameter is null
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when a required parameter is null
             </exception>
             <return>
             A response object containing the response body and response headers.
             </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperations.TrainWithHttpMessagesAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Queue a person group training task, the training task may not be started
            immediately.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperationsExtensions">
            <summary>
            Extension methods for PersonGroupOperations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperationsExtensions.CreateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
             <summary>
             Create a new person group with specified personGroupId, name, user-provided
             userData and recognitionModel.
             &lt;br /&gt; A person group is the container of the uploaded person data,
             including face images and face recognition features.
             &lt;br /&gt; After creation, use [PersonGroup Person -
             Create](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523c)
             to add persons into the group, and then call [PersonGroup -
             Train](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395249)
             to get this group ready for [Face -
             Identify](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395239).
             &lt;br /&gt; The person's face, image, and userData will be stored on
             server until [PersonGroup Person -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f3039523d)
             or [PersonGroup -
             Delete](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395245)
             is called.
             &lt;br /&gt;
             * Free-tier subscription quota: 1,000 person groups. Each holds up to 1,000
             persons.
             * S0-tier subscription quota: 1,000,000 person groups. Each holds up to
             10,000 persons.
             * to handle larger scale face identification problem, please consider using
             [LargePersonGroup](/docs/services/563879b61984550e40cbbe8d/operations/599acdee6ac60f11b48b5a9d).
             &lt;br /&gt;
             'recognitionModel' should be specified to associate with this person group.
             The default value for 'recognitionModel' is 'recognition_01', if the latest
             model needed, please explicitly specify the model you need in this
             parameter. New faces that are added to an existing person group will use
             the recognition model that's already associated with the collection.
             Existing face features in a person group can't be updated to features
             extracted by another version of recognition model.
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='personGroupId'>
             Id referencing a particular person group.
             </param>
             <param name='name'>
             User defined name, maximum length is 128.
             </param>
             <param name='userData'>
             User specified data. Length should not exceed 16KB.
             </param>
             <param name='recognitionModel'>
             Possible values include: 'recognition_01', 'recognition_02'
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperationsExtensions.DeleteAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Delete an existing person group. Persisted face features of all people in
            the person group will also be deleted.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperationsExtensions.GetAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Retrieve person group name, userData and recognitionModel. To get person
            information under this personGroup, use [PersonGroup Person -
            List](/docs/services/563879b61984550e40cbbe8d/operations/563879b61984550f30395241).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='returnRecognitionModel'>
            A value indicating whether the operation should return 'recognitionModel'
            in response.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperationsExtensions.UpdateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update an existing person group's display name and userData. The properties
            which does not appear in request body will not be updated.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperationsExtensions.GetTrainingStatusAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieve the training status of a person group (completed or ongoing).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperationsExtensions.ListAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations,System.String,System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Threading.CancellationToken)">
             <summary>
             List person groups’s personGroupId, name, userData and
             recognitionModel.&lt;br /&gt;
             * Person groups are stored in alphabetical order of personGroupId.
             * "start" parameter (string, optional) is a user-provided personGroupId
             value that returned entries have larger ids by string comparison. "start"
             set to empty to indicate return from the first item.
             * "top" parameter (int, optional) specifies the number of entries to
             return. A maximal of 1000 entries can be returned in one call. To fetch
             more, you can specify "start" with the last retuned entry’s Id of the
             current call.
             &lt;br /&gt;
             For example, total 5 person groups: "group1", ..., "group5".
             &lt;br /&gt; "start=&amp;top=" will return all 5 groups.
             &lt;br /&gt; "start=&amp;top=2" will return "group1", "group2".
             &lt;br /&gt; "start=group2&amp;top=3" will return "group3", "group4",
             "group5".
            
             </summary>
             <param name='operations'>
             The operations group for this extension method.
             </param>
             <param name='start'>
             List person groups from the least personGroupId greater than the "start".
             </param>
             <param name='top'>
             The number of person groups to list.
             </param>
             <param name='returnRecognitionModel'>
             A value indicating whether the operation should return 'recognitionModel'
             in response.
             </param>
             <param name='cancellationToken'>
             The cancellation token.
             </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupOperationsExtensions.TrainAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupOperations,System.String,System.Threading.CancellationToken)">
            <summary>
            Queue a person group training task, the training task may not be started
            immediately.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson">
            <summary>
            PersonGroupPerson operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient)">
            <summary>
            Initializes a new instance of the PersonGroupPerson class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.Client">
            <summary>
            Gets a reference to the FaceClient
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.CreateWithHttpMessagesAsync(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Create a new person in a specified person group.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.ListWithHttpMessagesAsync(System.String,System.String,System.Nullable{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            List all persons in a person group, and retrieve person information
            (including personId, name, userData and persistedFaceIds of registered
            faces of the person).
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='start'>
            Starting person id to return (used to list a range of persons).
            </param>
            <param name='top'>
            Number of persons to return starting with the person id indicated by the
            'start' parameter.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.DeleteWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing person from a person group. All stored person data, and
            face features in the person entry will be deleted.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.GetWithHttpMessagesAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve a person's information, including registered persisted faces, name
            and userData.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.UpdateWithHttpMessagesAsync(System.String,System.Guid,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update name or userData of a person.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.DeleteFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete a face from a person. Relative feature for the persisted face will
            also be deleted.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.GetFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a persisted face (specified by persistedFaceId,
            personId and its belonging personGroupId).
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.UpdateFaceWithHttpMessagesAsync(System.String,System.Guid,System.Guid,System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update a person persisted face's userData field.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='userData'>
            User-provided data attached to the face. The size limit is 1KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.AddFaceFromUrlWithHttpMessagesAsync(System.String,System.Guid,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input face is
            specified as an image with a targetFace rectangle.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPerson.AddFaceFromStreamWithHttpMessagesAsync(System.String,System.Guid,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input face is
            specified as an image with a targetFace rectangle.
            </summary>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPersonExtensions">
            <summary>
            Extension methods for PersonGroupPerson.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPersonExtensions.CreateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Create a new person in a specified person group.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPersonExtensions.ListAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson,System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            List all persons in a person group, and retrieve person information
            (including personId, name, userData and persistedFaceIds of registered
            faces of the person).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='start'>
            Starting person id to return (used to list a range of persons).
            </param>
            <param name='top'>
            Number of persons to return starting with the person id indicated by the
            'start' parameter.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPersonExtensions.DeleteAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete an existing person from a person group. All stored person data, and
            face features in the person entry will be deleted.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPersonExtensions.GetAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson,System.String,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve a person's information, including registered persisted faces, name
            and userData.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPersonExtensions.UpdateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson,System.String,System.Guid,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Update name or userData of a person.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='name'>
            User defined name, maximum length is 128.
            </param>
            <param name='userData'>
            User specified data. Length should not exceed 16KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPersonExtensions.DeleteFaceAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson,System.String,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete a face from a person. Relative feature for the persisted face will
            also be deleted.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPersonExtensions.GetFaceAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson,System.String,System.Guid,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a persisted face (specified by persistedFaceId,
            personId and its belonging personGroupId).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPersonExtensions.UpdateFaceAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson,System.String,System.Guid,System.Guid,System.String,System.Threading.CancellationToken)">
            <summary>
            Update a person persisted face's userData field.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='persistedFaceId'>
            Id referencing a particular persistedFaceId of an existing face.
            </param>
            <param name='userData'>
            User-provided data attached to the face. The size limit is 1KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPersonExtensions.AddFaceFromUrlAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson,System.String,System.Guid,System.String,System.String,System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input face is
            specified as an image with a targetFace rectangle.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='url'>
            Publicly reachable URL of an image
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.PersonGroupPersonExtensions.AddFaceFromStreamAsync(Microsoft.Azure.CognitiveServices.Vision.Face.IPersonGroupPerson,System.String,System.Guid,System.IO.Stream,System.String,System.Collections.Generic.IList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Add a representative face to a person for identification. The input face is
            specified as an image with a targetFace rectangle.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='personGroupId'>
            Id referencing a particular person group.
            </param>
            <param name='personId'>
            Id referencing a particular person.
            </param>
            <param name='image'>
            An image stream.
            </param>
            <param name='userData'>
            User-specified data about the face for any purpose. The maximum length is
            1KB.
            </param>
            <param name='targetFace'>
            A face rectangle to specify the target face to be added to a person in the
            format of "targetFace=left,top,width,height". E.g.
            "targetFace=10,10,100,100". If there is more than one face in the image,
            targetFace is required to specify which face to add. No targetFace means
            there is only one face detected in the entire image.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperations">
            <summary>
            SnapshotOperations operations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperations.#ctor(Microsoft.Azure.CognitiveServices.Vision.Face.FaceClient)">
            <summary>
            Initializes a new instance of the SnapshotOperations class.
            </summary>
            <param name='client'>
            Reference to the service client.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
        </member>
        <member name="P:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperations.Client">
            <summary>
            Gets a reference to the FaceClient
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperations.TakeWithHttpMessagesAsync(Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotObjectType,System.String,System.Collections.Generic.IList{System.Guid},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Submit an operation to take a snapshot of face list, large face list,
            person group or large person group, with user-specified snapshot type,
            source object id, apply scope and an optional user data.&lt;br /&gt;
            The snapshot interfaces are for users to backup and restore their face data
            from one face subscription to another, inside same region or across
            regions. The workflow contains two phases, user first calls Snapshot - Take
            to create a copy of the source object and store it as a snapshot, then
            calls Snapshot - Apply to paste the snapshot to target subscription. The
            snapshots are stored in a centralized location (per Azure instance), so
            that they can be applied cross accounts and regions.&lt;br /&gt;
            Taking snapshot is an asynchronous operation. An operation id can be
            obtained from the "Operation-Location" field in response header, to be used
            in OperationStatus - Get for tracking the progress of creating the
            snapshot. The snapshot id will be included in the "resourceLocation" field
            in OperationStatus - Get response when the operation status is
            "succeeded".&lt;br /&gt;
            Snapshot taking time depends on the number of person and face entries in
            the source object. It could be in seconds, or up to several hours for
            1,000,000 persons with multiple faces.&lt;br /&gt;
            Snapshots will be automatically expired and cleaned in 48 hours after it is
            created by Snapshot - Take. User can delete the snapshot using Snapshot -
            Delete by themselves any time before expiration.&lt;br /&gt;
            Taking snapshot for a certain object will not block any other operations
            against the object. All read-only operations (Get/List and
            Identify/FindSimilar/Verify) can be conducted as usual. For all writable
            operations, including Add/Update/Delete the source object or its
            persons/faces and Train, they are not blocked but not recommended because
            writable updates may not be reflected on the snapshot during its taking.
            After snapshot taking is completed, all readable and writable operations
            can work as normal. Snapshot will also include the training results of the
            source object, which means target subscription the snapshot applied to does
            not need re-train the target object before calling
            Identify/FindSimilar.&lt;br /&gt;
            * Free-tier subscription quota: 100 take operations per month.
            * S0-tier subscription quota: 100 take operations per day.
            </summary>
            <param name='type'>
            User specified type for the source object to take snapshot from. Currently
            FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported.
            Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup',
            'PersonGroup'
            </param>
            <param name='objectId'>
            User specified source object id to take snapshot from.
            </param>
            <param name='applyScope'>
            User specified array of target Face subscription ids for the snapshot. For
            each snapshot, only subscriptions included in the applyScope of Snapshot -
            Take can apply it.
            </param>
            <param name='userData'>
            User specified data about the snapshot for any purpose. Length should not
            exceed 16KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperations.ListWithHttpMessagesAsync(System.Nullable{Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotObjectType},System.Collections.Generic.IList{System.Guid},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            List all accessible snapshots with related information, including snapshots
            that were taken by the user, or snapshots to be applied to the user
            (subscription id was included in the applyScope in Snapshot - Take).
            </summary>
            <param name='type'>
            User specified object type as a search filter. Possible values include:
            'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'
            </param>
            <param name='applyScope'>
            User specified snapshot apply scopes as a search filter. ApplyScope is an
            array of the target Azure subscription ids for the snapshot, specified by
            the user who created the snapshot by Snapshot - Take.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperations.GetWithHttpMessagesAsync(System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a snapshot. Snapshot is only accessible to the
            source subscription who took it, and target subscriptions included in the
            applyScope in Snapshot - Take.
            </summary>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperations.UpdateWithHttpMessagesAsync(System.Guid,System.Collections.Generic.IList{System.Guid},System.String,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Update the information of a snapshot. Only the source subscription who took
            the snapshot can update the snapshot.
            </summary>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='applyScope'>
            Array of the target Face subscription ids for the snapshot, specified by
            the user who created the snapshot when calling Snapshot - Take. For each
            snapshot, only subscriptions included in the applyScope of Snapshot - Take
            can apply it.
            </param>
            <param name='userData'>
            User specified data about the snapshot for any purpose. Length should not
            exceed 16KB.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperations.DeleteWithHttpMessagesAsync(System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Delete an existing snapshot according to the snapshotId. All object data
            and information in the snapshot will also be deleted. Only the source
            subscription who took the snapshot can delete the snapshot. If the user
            does not delete a snapshot with this API, the snapshot will still be
            automatically deleted in 48 hours after creation.
            </summary>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperations.ApplyWithHttpMessagesAsync(System.Guid,System.String,Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotApplyMode,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Submit an operation to apply a snapshot to current subscription. For each
            snapshot, only subscriptions included in the applyScope of Snapshot - Take
            can apply it.&lt;br /&gt;
            The snapshot interfaces are for users to backup and restore their face data
            from one face subscription to another, inside same region or across
            regions. The workflow contains two phases, user first calls Snapshot - Take
            to create a copy of the source object and store it as a snapshot, then
            calls Snapshot - Apply to paste the snapshot to target subscription. The
            snapshots are stored in a centralized location (per Azure instance), so
            that they can be applied cross accounts and regions.&lt;br /&gt;
            Applying snapshot is an asynchronous operation. An operation id can be
            obtained from the "Operation-Location" field in response header, to be used
            in OperationStatus - Get for tracking the progress of applying the
            snapshot. The target object id will be included in the "resourceLocation"
            field in OperationStatus - Get response when the operation status is
            "succeeded".&lt;br /&gt;
            Snapshot applying time depends on the number of person and face entries in
            the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000
            persons with multiple faces.&lt;br /&gt;
            Snapshots will be automatically expired and cleaned in 48 hours after it is
            created by Snapshot - Take. So the target subscription is required to apply
            the snapshot in 48 hours since its creation.&lt;br /&gt;
            Applying a snapshot will not block any other operations against the target
            object, however it is not recommended because the correctness cannot be
            guaranteed during snapshot applying. After snapshot applying is completed,
            all operations towards the target object can work as normal. Snapshot also
            includes the training results of the source object, which means target
            subscription the snapshot applied to does not need re-train the target
            object before calling Identify/FindSimilar.&lt;br /&gt;
            One snapshot can be applied multiple times in parallel, while currently
            only CreateNew apply mode is supported, which means the apply operation
            will fail if target subscription already contains an object of same type
            and using the same objectId. Users can specify the "objectId" in request
            body to avoid such conflicts.&lt;br /&gt;
            * Free-tier subscription quota: 100 apply operations per month.
            * S0-tier subscription quota: 100 apply operations per day.
            </summary>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='objectId'>
            User specified target object id to be created from the snapshot.
            </param>
            <param name='mode'>
            Snapshot applying mode. Currently only CreateNew is supported, which means
            the apply operation will fail if target subscription already contains an
            object of same type and using the same objectId. Users can specify the
            "objectId" in request body to avoid such conflicts. Possible values
            include: 'CreateNew'
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperations.GetOperationStatusWithHttpMessagesAsync(System.Guid,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Threading.CancellationToken)">
            <summary>
            Retrieve the status of a take/apply snapshot operation.
            </summary>
            <param name='operationId'>
            Id referencing a particular take/apply snapshot operation.
            </param>
            <param name='customHeaders'>
            Headers that will be added to request.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
            <exception cref="T:Microsoft.Azure.CognitiveServices.Vision.Face.Models.APIErrorException">
            Thrown when the operation returned an invalid status code
            </exception>
            <exception cref="T:Microsoft.Rest.SerializationException">
            Thrown when unable to deserialize the response
            </exception>
            <exception cref="T:Microsoft.Rest.ValidationException">
            Thrown when a required parameter is null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when a required parameter is null
            </exception>
            <return>
            A response object containing the response body and response headers.
            </return>
        </member>
        <member name="T:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperationsExtensions">
            <summary>
            Extension methods for SnapshotOperations.
            </summary>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperationsExtensions.TakeAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations,Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotObjectType,System.String,System.Collections.Generic.IList{System.Guid},System.String,System.Threading.CancellationToken)">
            <summary>
            Submit an operation to take a snapshot of face list, large face list,
            person group or large person group, with user-specified snapshot type,
            source object id, apply scope and an optional user data.&lt;br /&gt;
            The snapshot interfaces are for users to backup and restore their face data
            from one face subscription to another, inside same region or across
            regions. The workflow contains two phases, user first calls Snapshot - Take
            to create a copy of the source object and store it as a snapshot, then
            calls Snapshot - Apply to paste the snapshot to target subscription. The
            snapshots are stored in a centralized location (per Azure instance), so
            that they can be applied cross accounts and regions.&lt;br /&gt;
            Taking snapshot is an asynchronous operation. An operation id can be
            obtained from the "Operation-Location" field in response header, to be used
            in OperationStatus - Get for tracking the progress of creating the
            snapshot. The snapshot id will be included in the "resourceLocation" field
            in OperationStatus - Get response when the operation status is
            "succeeded".&lt;br /&gt;
            Snapshot taking time depends on the number of person and face entries in
            the source object. It could be in seconds, or up to several hours for
            1,000,000 persons with multiple faces.&lt;br /&gt;
            Snapshots will be automatically expired and cleaned in 48 hours after it is
            created by Snapshot - Take. User can delete the snapshot using Snapshot -
            Delete by themselves any time before expiration.&lt;br /&gt;
            Taking snapshot for a certain object will not block any other operations
            against the object. All read-only operations (Get/List and
            Identify/FindSimilar/Verify) can be conducted as usual. For all writable
            operations, including Add/Update/Delete the source object or its
            persons/faces and Train, they are not blocked but not recommended because
            writable updates may not be reflected on the snapshot during its taking.
            After snapshot taking is completed, all readable and writable operations
            can work as normal. Snapshot will also include the training results of the
            source object, which means target subscription the snapshot applied to does
            not need re-train the target object before calling
            Identify/FindSimilar.&lt;br /&gt;
            * Free-tier subscription quota: 100 take operations per month.
            * S0-tier subscription quota: 100 take operations per day.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='type'>
            User specified type for the source object to take snapshot from. Currently
            FaceList, PersonGroup, LargeFaceList and LargePersonGroup are supported.
            Possible values include: 'FaceList', 'LargeFaceList', 'LargePersonGroup',
            'PersonGroup'
            </param>
            <param name='objectId'>
            User specified source object id to take snapshot from.
            </param>
            <param name='applyScope'>
            User specified array of target Face subscription ids for the snapshot. For
            each snapshot, only subscriptions included in the applyScope of Snapshot -
            Take can apply it.
            </param>
            <param name='userData'>
            User specified data about the snapshot for any purpose. Length should not
            exceed 16KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperationsExtensions.ListAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations,System.Nullable{Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotObjectType},System.Collections.Generic.IList{System.Guid},System.Threading.CancellationToken)">
            <summary>
            List all accessible snapshots with related information, including snapshots
            that were taken by the user, or snapshots to be applied to the user
            (subscription id was included in the applyScope in Snapshot - Take).
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='type'>
            User specified object type as a search filter. Possible values include:
            'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'
            </param>
            <param name='applyScope'>
            User specified snapshot apply scopes as a search filter. ApplyScope is an
            array of the target Azure subscription ids for the snapshot, specified by
            the user who created the snapshot by Snapshot - Take.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperationsExtensions.GetAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve information about a snapshot. Snapshot is only accessible to the
            source subscription who took it, and target subscriptions included in the
            applyScope in Snapshot - Take.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperationsExtensions.UpdateAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations,System.Guid,System.Collections.Generic.IList{System.Guid},System.String,System.Threading.CancellationToken)">
            <summary>
            Update the information of a snapshot. Only the source subscription who took
            the snapshot can update the snapshot.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='applyScope'>
            Array of the target Face subscription ids for the snapshot, specified by
            the user who created the snapshot when calling Snapshot - Take. For each
            snapshot, only subscriptions included in the applyScope of Snapshot - Take
            can apply it.
            </param>
            <param name='userData'>
            User specified data about the snapshot for any purpose. Length should not
            exceed 16KB.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperationsExtensions.DeleteAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete an existing snapshot according to the snapshotId. All object data
            and information in the snapshot will also be deleted. Only the source
            subscription who took the snapshot can delete the snapshot. If the user
            does not delete a snapshot with this API, the snapshot will still be
            automatically deleted in 48 hours after creation.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperationsExtensions.ApplyAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations,System.Guid,System.String,Microsoft.Azure.CognitiveServices.Vision.Face.Models.SnapshotApplyMode,System.Threading.CancellationToken)">
            <summary>
            Submit an operation to apply a snapshot to current subscription. For each
            snapshot, only subscriptions included in the applyScope of Snapshot - Take
            can apply it.&lt;br /&gt;
            The snapshot interfaces are for users to backup and restore their face data
            from one face subscription to another, inside same region or across
            regions. The workflow contains two phases, user first calls Snapshot - Take
            to create a copy of the source object and store it as a snapshot, then
            calls Snapshot - Apply to paste the snapshot to target subscription. The
            snapshots are stored in a centralized location (per Azure instance), so
            that they can be applied cross accounts and regions.&lt;br /&gt;
            Applying snapshot is an asynchronous operation. An operation id can be
            obtained from the "Operation-Location" field in response header, to be used
            in OperationStatus - Get for tracking the progress of applying the
            snapshot. The target object id will be included in the "resourceLocation"
            field in OperationStatus - Get response when the operation status is
            "succeeded".&lt;br /&gt;
            Snapshot applying time depends on the number of person and face entries in
            the snapshot object. It could be in seconds, or up to 1 hour for 1,000,000
            persons with multiple faces.&lt;br /&gt;
            Snapshots will be automatically expired and cleaned in 48 hours after it is
            created by Snapshot - Take. So the target subscription is required to apply
            the snapshot in 48 hours since its creation.&lt;br /&gt;
            Applying a snapshot will not block any other operations against the target
            object, however it is not recommended because the correctness cannot be
            guaranteed during snapshot applying. After snapshot applying is completed,
            all operations towards the target object can work as normal. Snapshot also
            includes the training results of the source object, which means target
            subscription the snapshot applied to does not need re-train the target
            object before calling Identify/FindSimilar.&lt;br /&gt;
            One snapshot can be applied multiple times in parallel, while currently
            only CreateNew apply mode is supported, which means the apply operation
            will fail if target subscription already contains an object of same type
            and using the same objectId. Users can specify the "objectId" in request
            body to avoid such conflicts.&lt;br /&gt;
            * Free-tier subscription quota: 100 apply operations per month.
            * S0-tier subscription quota: 100 apply operations per day.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='snapshotId'>
            Id referencing a particular snapshot.
            </param>
            <param name='objectId'>
            User specified target object id to be created from the snapshot.
            </param>
            <param name='mode'>
            Snapshot applying mode. Currently only CreateNew is supported, which means
            the apply operation will fail if target subscription already contains an
            object of same type and using the same objectId. Users can specify the
            "objectId" in request body to avoid such conflicts. Possible values
            include: 'CreateNew'
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
        <member name="M:Microsoft.Azure.CognitiveServices.Vision.Face.SnapshotOperationsExtensions.GetOperationStatusAsync(Microsoft.Azure.CognitiveServices.Vision.Face.ISnapshotOperations,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Retrieve the status of a take/apply snapshot operation.
            </summary>
            <param name='operations'>
            The operations group for this extension method.
            </param>
            <param name='operationId'>
            Id referencing a particular take/apply snapshot operation.
            </param>
            <param name='cancellationToken'>
            The cancellation token.
            </param>
        </member>
    </members>
</doc>
